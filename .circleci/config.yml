# CircleCI integration with Drupal 8.

# Reusable steps.

## Add SSH Key
add_ssh: &add_ssh
  add_ssh_keys:
    fingerprints:
      - "88:4a:09:8a:0f:d7:ee:ed:74:4e:f3:33:5e:98:ce:85"

## Add Known Hosts
add_known_hosts: &add_known_hosts
  run:
    name: Add SSH Known Hosts
    command: |
      ssh-keyscan srv-7503.devcloud.hosting.acquia.com >> ~/.ssh/known_hosts
      ssh-keyscan svn-4786.devcloud.hosting.acquia.com >> ~/.ssh/known_hosts
      ssh-keyscan -t rsa,dsa github.com >> ~/.ssh/known_hosts

## Defines images and working directory.
defaults: &defaults
  docker:
    - image: pookmish/drupal8ci@sha256:062f825bee8534022e3e0e6922898d8b985ba37ecfbe4086f85c705d82c5697d
    - image: selenium/standalone-chrome:latest
    - image: mariadb:10.3
      environment:
        MYSQL_ALLOW_EMPTY_PASSWORD: 1
  working_directory: /var/www/html

## Defines the cache restoring mechanism.
restore_cache: &restore_cache
  # We use the composer.lock as a way to determine if we can cache our build.
  keys:
    - v10-dependencies-{{ checksum "composer.lock" }}
    # fallback to using the latest cache if no exact match is found
    - v10-dependencies-

## Defines the cache saving mechanism.
save_cache: &save_cache
  paths:
    - ./vendor
    - ./docroot/libraries
    - ./docroot/core
    - ./docroot/modules/contrib
    - ./docroot/modules/custom
  key: v10-dependencies-{{ checksum "composer.lock" }}

#Jobs

directory_setup: &directory_setup
  <<: *defaults
  steps:
#    - *add_ssh
#    - *add_known_hosts
    - checkout
    - restore_cache: *restore_cache
    - run:
        name: Composer setup
        command: |
          composer install --optimize-autoloader --no-interaction
    - save_cache: *save_cache
    - persist_to_workspace:
        root: .
        paths:
          - .

### Job to run the update path and Behat tests.
behat_tests_first: &behat_tests_first
  <<: *defaults
  steps:
    - *add_ssh
    - *add_known_hosts
    - attach_workspace:
        at: .
    - run:
        name: Run Behat tests
        command: vendor/bin/blt circleci:behat:first
    - store_test_results:
        path: /var/www/html/artifacts/behat
    - store_artifacts:
        path: /var/www/html/artifacts

### Job to run the update path and Behat tests.
behat_tests_second: &behat_tests_second
  <<: *defaults
  steps:
    - *add_ssh
    - *add_known_hosts
    - attach_workspace:
        at: .
    - run:
        name: Run Behat tests
        command: vendor/bin/blt circleci:behat:second
    - store_test_results:
        path: /var/www/html/artifacts/behat
    - store_artifacts:
        path: /var/www/html/artifacts

## Job to run Unit and Kernel tests.
fresh_install_tests: &fresh_install_tests
  <<: *defaults
  steps:
    - attach_workspace:
        at: .
    - run:
        name: Run PHPUnit tests
        command: vendor/bin/blt circleci:phpunit
    - run:
        name: Generate code coverage report
        command: vendor/bin/blt circleci:behat:install
    - store_test_results:
        path: /var/www/html/artifacts/phpunit
    - store_artifacts:
        path: /var/www/html/artifacts

## Job to check test coverage.
code_coverage: &code_coverage
  <<: *defaults
  steps:
    - attach_workspace:
        at: .
    - run: composer require pcov/clobber --dev
    - run: vendor/bin/pcov clobber
    - run:
        name: Generate code coverage report
        command: vendor/bin/blt circleci:phpunit:coverage
    - store_artifacts:
        path: /var/www/html/artifacts/coverage
    - store_test_results:
        path: /var/www/html/artifacts

## Job to deploy the current branch to Acquia hosting using BLT.
deploy_branch: &deploy_branch
  <<: *defaults
  steps:
    - *add_ssh
    - *add_known_hosts
    - attach_workspace:
        at: .
    - run:
        name: Deploying branch to Acquia
        command: |
          git config --global user.email "sws-developers@lists.stanford.edu"
          git config --global user.name "CircleCI"
          vendor/bin/blt deploy --no-interaction

## Job to deploy the new tag to Acquia hosting using BLT.
deploy_tag: &deploy_tag
  <<: *defaults
  steps:
    - *add_ssh
    - *add_known_hosts
    - checkout
    - restore_cache: *restore_cache
    - run: composer install --optimize-autoloader
    - run:
        name: Deploying Tag to Acquia
        command: |
          git config --global user.email "sws-developers@lists.stanford.edu"
          git config --global user.name "CircleCI"
          DATE=`date +%Y-%m-%d`
          vendor/bin/blt deploy --tag=$(echo ${DATE}_${CIRCLE_TAG}) --commit-msg=$CIRCLE_TAG --no-interaction
          vendor/bin/blt circleci:new-release-branch ${CIRCLE_TAG}

update_dependencies: &update_dependencies
  <<: *defaults
  steps:
    - *add_ssh
    - *add_known_hosts
    - checkout
    - restore_cache: *restore_cache
    - run: composer install --optimize-autoloader
    - run:
        name: Update dependencies
        no_output_timeout: 30m
        command: |
          git config --global user.email "sws-developers@lists.stanford.edu"
          git config --global user.name "CircleCI"
          vendor/bin/blt circleci:update
    - save_cache: *save_cache

update_certs: &update_certs
  <<: *defaults
  steps:
    - *add_ssh
    - *add_known_hosts
    - checkout
    - restore_cache: *restore_cache
    - run: composer install --optimize-autoloader
    - run:
        name: Update Prod SSL Certs
        command: |
          vendor/bin/blt humsci:update-cert prod
          vendor/bin/blt humsci:clean-backups

# Declare all of the jobs we should run.
version: 2
jobs:
  run-updates:
    <<: *update_dependencies
  run-setup:
    <<: *directory_setup
  run-behat-tests-first:
    <<: *behat_tests_first
  run-behat-tests-second:
    <<: *behat_tests_second
  run-fresh-install-tests:
    <<: *fresh_install_tests
  run-code-coverage:
    <<: *code_coverage
  run-deploy-branch:
    <<: *deploy_branch
  run-deploy-tag:
    <<: *deploy_tag
  run-update-certs:
    <<: *update_certs

# Declare a workflow that runs all of our jobs in parallel.
workflows:
  version: 2
  deploy_tag:
    jobs:
      # Tags are only created on successful code. Deploy the tag after creation.
      # This will trigger after the release is created above.
      - run-deploy-tag:
          filters:
            tags:
              only:
                - /.*/
            branches:
              ignore:
                - /.*/
  test_lint_deploy:
    jobs:
      - run-setup
      - run-behat-tests-first:
          requires:
            - run-setup
      - run-behat-tests-second:
          requires:
            - run-setup
      - run-fresh-install-tests:
          requires:
            - run-setup
      - run-code-coverage:
          requires:
            - run-setup
      # If the above jobs complete successfully, deploy the branch.
      - run-deploy-branch:
          requires:
            - run-behat-tests-first
            - run-behat-tests-second
            - run-fresh-install-tests
            - run-code-coverage
  dependency_updates:
    triggers:
      - schedule:
          cron: "0 14 * * 3"
          filters:
            branches:
              only:
                - /8\..*-release/
    jobs:
      - run-updates

  update_certs:
    triggers:
      - schedule:
          cron: "0 0 1 * *"
          filters:
            branches:
              only:
                - /develop/
    jobs:
      - run-update-certs
