# CircleCI integration with Drupal 8.

# Reusable steps.

## Add SSH Key
add_ssh: &add_ssh
  add_ssh_keys:
    fingerprints:
      - "88:4a:09:8a:0f:d7:ee:ed:74:4e:f3:33:5e:98:ce:85"

## Add Known Hosts
add_known_hosts: &add_known_hosts
  run:
    name: Add SSH Known Hosts
    command: |
      ssh-keyscan svn-23450.prod.hosting.acquia.com >> ~/.ssh/known_hosts
      ssh-keyscan web-42199.prod.hosting.acquia.com >> ~/.ssh/known_hosts
      ssh-keyscan staging-25390.prod.hosting.acquia.com >> ~/.ssh/known_hosts
      ssh-keyscan -t rsa,dsa github.com >> ~/.ssh/known_hosts

## Defines images and working directory.
defaults: &defaults
  docker:
    - image: pookmish/drupal8ci:latest
    - image: selenium/standalone-chrome:3.141.59-20210713
    - image: circleci/mysql:5.7
      environment:
        MYSQL_DATABASE: drupal
        MYSQL_USER: drupal
        MYSQL_PASSWORD: drupal
        MYSQL_ALLOW_EMPTY_PASSWORD: 1
      command: ['--max-allowed-packet=67108864']
  working_directory: /var/www/html

## Defines the cache restoring mechanism.
restore_cache: &restore_cache
  # We use the composer.lock as a way to determine if we can cache our build.
  keys:
    - v12-dependencies--{{ checksum "composer.lock" }}
    # fallback to using the latest cache if no exact match is found
    - v12-dependencies--

## Defines the cache saving mechanism.
save_cache: &save_cache
  paths:
    - ./vendor
    - ./docroot/libraries
    - ./docroot/core
    - ./docroot/modules/contrib
    - ./docroot/modules/custom
    - ./tests/codeception/_data/VisualCeption
  key: v12-dependencies--{{ checksum "composer.lock" }}--{{ epoch }}

disable_telemetry: &disable_telemetry
  run:
    name: Disable Telemetry
    command: vendor/bin/blt blt:telemetry:disable --no-interaction
#Jobs

directory_setup: &directory_setup
  <<: *defaults
  steps:
    - checkout
    - restore_cache: *restore_cache
    - run:
        name: Composer setup
        command: |
          composer install --optimize-autoloader --no-interaction
          vendor/bin/blt blt:telemetry:disable --no-interaction
          vendor/bin/blt settings --no-interaction
    - save_cache: *save_cache
    - persist_to_workspace:
        root: .
        paths:
          - .

### Job to run the update path and Codeception tests.
acceptance_first: &acceptance_first
  <<: *defaults
  steps:
    - *add_ssh
    - *add_known_hosts
    - attach_workspace:
        at: .
    - *disable_telemetry
    - run:
        name: Run Acceptance tests
        command: vendor/bin/blt circleci:codeception 0
    - store_test_results:
        path: /var/www/html/artifacts
    - store_artifacts:
        path: /var/www/html/artifacts

### Job to run the update path and Codeception tests.
acceptance_second: &acceptance_second
  <<: *defaults
  steps:
    - *add_ssh
    - *add_known_hosts
    - attach_workspace:
        at: .
    - *disable_telemetry
    - run:
        name: Run Acceptance tests
        command: vendor/bin/blt circleci:codeception 1
    - store_test_results:
        path: /var/www/html/artifacts
    - store_artifacts:
        path: /var/www/html/artifacts

## Job to run Unit and Kernel tests.
acceptance: &acceptance
  <<: *defaults
  steps:
    - attach_workspace:
        at: .
    - *disable_telemetry
    - run:
        name: Run installation Acceptance tests
        command: vendor/bin/blt circleci:codeception
    - save_cache:
        paths:
          - artifacts/functional/debug/visual
        key: visual-regression--{{ .Branch }}--{{ epoch }}
        when: always
        name: 'Save Visual Regression Images'
    - run:
        name: Create netrc
        command: printf "machine circleci.com\nlogin ${CIRCLECI_TOKEN}\npassword" > ~/.netrc
    - run:
        name: Trigger Visual Test Acceptance
        when: on_fail
        command: |
          curl -n -X POST \
            --header 'content-type: application/json' \
            --data  "{\"branch\":\"${CIRCLE_BRANCH}\",\"parameters\":{\"failed_visual_regession_tests\":true}}" \
            https://circleci.com/api/v2/project/gh/SU-HSDO/suhumsci/pipeline
    - store_test_results:
        path: /var/www/html/artifacts
    - store_artifacts:
        path: /var/www/html/artifacts

update_visual_references: &update_visual_references
  <<: *defaults
  steps:
    - checkout
    - restore_cache: *restore_cache
    - restore_cache:
        keys:
          - visual-regression--{{ .Branch }}--
          - visual-regression--
    - run:
        command: |
          mkdir -p ./tests/codeception/_data/VisualCeption/
          cp artifacts/functional/debug/visual/* ./tests/codeception/_data/VisualCeption/
    - save_cache: *save_cache

phpunit_coverage: &phpunit_coverage
  <<: *defaults
  steps:
    - attach_workspace:
        at: .
    - *disable_telemetry
    - run:
        name: Run PHPUnit Coverage Tests
        command: |
          dockerize -wait tcp://localhost:3306 -timeout 1m
          apachectl stop; apachectl start
          vendor/bin/blt tests:phpunit:coverage --no-interaction
    - store_test_results:
        path: artifacts/phpunit
    - store_artifacts:
        path: artifacts/phpunit

## Job to deploy the current branch to Acquia hosting using BLT.
deploy_branch: &deploy_branch
  <<: *defaults
  steps:
    - *add_ssh
    - *add_known_hosts
    - attach_workspace:
        at: .
    - *disable_telemetry
    - run:
        name: Deploying branch to Acquia
        command: |
          git config --global user.email "sws-developers@lists.stanford.edu"
          git config --global user.name "CircleCI"
          vendor/bin/blt deploy --no-interaction

## Job to deploy the new tag to Acquia hosting using BLT.
deploy_tag: &deploy_tag
  <<: *defaults
  steps:
    - *add_ssh
    - *add_known_hosts
    - checkout
    - restore_cache: *restore_cache
    - run: composer install --optimize-autoloader
    - *disable_telemetry
    - run:
        name: Deploying Tag to Acquia
        command: |
          git config --global user.email "sws-developers@lists.stanford.edu"
          git config --global user.name "CircleCI"
          DATE=`date +%Y-%m-%d`
          vendor/bin/blt deploy --tag=$(echo ${DATE}_${CIRCLE_TAG}) --commit-msg=$CIRCLE_TAG --no-interaction
          vendor/bin/blt circleci:new-release-branch ${CIRCLE_TAG}

update_dependencies: &update_dependencies
  <<: *defaults
  steps:
    - *add_ssh
    - *add_known_hosts
    - checkout
    - restore_cache: *restore_cache
    - run: composer install --optimize-autoloader
    - *disable_telemetry
    - run:
        name: Update dependencies
        no_output_timeout: 30m
        command: |
          git config --global user.email "sws-developers@lists.stanford.edu"
          git config --global user.name "CircleCI"
          vendor/bin/blt humsci:clean-backups
          vendor/bin/blt circleci:update
    - save_cache: *save_cache

run-content-stage: &run-content-stage
  docker:
    - image: cimg/php:7.4
  steps:
    - checkout
    - run: composer install --optimize-autoloader
    - *disable_telemetry
    - run: vendor/bin/blt stage --no-interaction
    - slack/notify:
        event: fail
        channel: C750VBZCZ
        template: basic_fail_1
    - slack/notify:
        event: pass
        channel: C750VBZCZ
        template: basic_success_1

# Declare all the jobs we should run.
jobs:
  run-updates:
    <<: *update_dependencies
  run-setup:
    <<: *directory_setup
  run-acceptance-first:
    <<: *acceptance_first
  run-acceptance-second:
    <<: *acceptance_second
  run-acceptance:
    <<: *acceptance
  run-code-coverage:
    <<: *phpunit_coverage
  run-deploy-branch:
    <<: *deploy_branch
  run-deploy-tag:
    <<: *deploy_tag
  run-content-stage:
    <<: *run-content-stage
  update-visual-regession:
    <<: *update_visual_references

parameters:
  failed_visual_regession_tests:
    type: boolean
    default: false

version: 2.1
orbs:
  slack: circleci/slack@4.4.2
# Declare a workflow that runs all of our jobs in parallel.
workflows:
  version: 2.1
  deploy_tag:
    jobs:
      # Tags are only created on successful code. Deploy the tag after creation.
      # This will trigger after the release is created above.
      - run-deploy-tag:
          filters:
            tags:
              only:
                - /.*/
            branches:
              ignore:
                - /.*/
  test_lint_deploy:
    when:
      not: << pipeline.parameters.failed_visual_regession_tests >>
    jobs:
      - run-setup
      - run-acceptance-first:
          requires:
            - run-setup
      - run-acceptance-second:
          requires:
            - run-setup
      - run-acceptance:
          requires:
            - run-setup
      - update-visual-regession:
          requires:
            - run-acceptance
      - run-code-coverage:
          requires:
            - run-setup
      # If the above jobs complete successfully, deploy the branch.
      - run-deploy-branch:
          requires:
            - run-code-coverage
            - run-acceptance-first
            - run-acceptance-second
            - run-acceptance
  update_visual_regression:
    when: << pipeline.parameters.failed_visual_regession_tests >>
    jobs:
      - approve_visual_diff:
          type: approval
      - update-visual-regession:
          requires:
            - approve_visual_diff
  dependency_updates:
    triggers:
      - schedule:
          cron: "0 14 * * 3"
          filters:
            branches:
              only:
                - /9\..*-release/
    jobs:
      - run-updates
  'Stage Content from Production':
    jobs:
      - run-content-stage:
          context: slack-secrets
    triggers:
      - schedule:
          cron: "0 23 * * 3"
          filters:
            branches:
              only:
                - /develop/
