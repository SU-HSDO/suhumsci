<?php

/**
 * @file
 * hs_field_helpers.module
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Layout\LayoutDefinition;
use Drupal\Core\Render\Element;

/**
 * Implements hook_preprocess().
 */
function hs_field_helpers_preprocess(&$variables, $hook) {
  // Each layout has its own preprocess hook. So we have to use generic hook.
  if (isset($variables['layout']) && $variables['layout'] instanceof LayoutDefinition) {

    foreach (Element::children($variables['content']) as $region) {

      // Some blocks such as a menu block don't have any output, but the layout
      // still outputs an empty container for the block that has no content.
      // So lets find out if they are empty, and clean them up.
      foreach (Element::children($variables['content'][$region]) as $item_id) {
        if (empty($variables['content'][$region][$item_id]['#theme'])) {
          unset($variables['content'][$region][$item_id]);
        }
      }

      // Clean up empty regions after we've cleaned up the blocks in the region.
      if (empty(Element::children($variables['content'][$region]))) {
        unset($variables['content'][$region]);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hs_field_helpers_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\field\Entity\FieldConfig $field_config */
  $field_config = $form_state->getBuildInfo()['callback_object']->getEntity();
  // Add an option to exclude views from the form. The module only has the
  // "allowed views" option. This hides the allowed views and adds the excluded
  // views.
  if ($field_config->getType() == 'viewfield') {
    $form['third_party_settings']['hs_field_helpers']['excluded_views'] = [
      '#type' => 'checkboxes',
      '#title' => t('Excluded views'),
      '#options' => $form['settings']['allowed_views']['#options'],
      '#default_value' => $field_config->getThirdPartySetting('hs_field_helpers', 'excluded_views'),
    ];
    $form['settings']['allowed_views']['#type'] = 'hidden';
    $form['#validate'][] = 'hs_field_helpers_form_field_config_edit_form_validate';
  }
}

/**
 * Validation handler for field config edit form.
 */
function hs_field_helpers_form_field_config_edit_form_validate(&$form, FormStateInterface $form_state) {
  if ($excluded_views = &$form_state->getValue([
    'third_party_settings',
    'hs_field_helpers',
    'excluded_views',
  ])) {
    // Remove keys on the values to make the config cleaner.
    $excluded_views = array_filter(array_values($excluded_views));
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function hs_field_helpers_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  /** @var \Drupal\viewfield\Plugin\Field\FieldWidget\ViewfieldWidgetSelect $widget */
  $widget = $context['widget'];
  if ($widget->getPluginId() == 'viewfield_select') {
    /** @var \Drupal\field\Entity\FieldConfig $field_config */
    $field_config = $context['items']->getFieldDefinition();

    // Strip the view options as defined by the exclude views settings.
    // @see hs_field_helpers_form_field_config_edit_form_alter().
    if ($excluded_views = $field_config->getThirdPartySetting('hs_field_helpers', 'excluded_views')) {
      $element['target_id']['#options'] = array_diff_key($element['target_id']['#options'], array_flip($excluded_views));
    }
  }
}
