<?php

/**
 * @file
 * Contains hs_blocks.module.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function hs_blocks_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the hs_blocks module.
    case 'help.page.hs_blocks':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Humsci Blocks') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function hs_blocks_theme($existing, $type, $theme, $path) {
  return [
    'hs_blocks_login' => [
      'template' => 'block--hs-login',
      'variables' => ['preface' => NULL, 'link' => NULL, 'postface' => NULL],
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hs_blocks_preprocess_block__block_content(&$variables) {
  if (empty($variables['content']['#block_content'])) {
    return;
  }
  /** @var \Drupal\block_content\Entity\BlockContent $block_entity */
  $block_entity = $variables['content']['#block_content'];
  if (
    $block_entity->hasField('field_hs_block_hide_title') &&
    $block_entity->get('field_hs_block_hide_title')->getString()
  ) {
    $variables['label'] = '';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hs_blocks_preprocess_block__group_block(&$variables) {
  if (!empty($variables['elements']['#configuration']['class'])) {
    $classes = explode(' ', $variables['elements']['#configuration']['class']);
    foreach ($classes as $class) {
      $variables['attributes']['class'][] = Html::cleanCssIdentifier($class);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hs_blocks_form_layout_builder_update_block_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\layout_builder\SectionStorageInterface $section_storage */
  [$section_storage, $delta, , $uuid] = $form_state->getBuildInfo()['args'];
  $section = $section_storage->getSection($delta);
  $component = $section->getComponent($uuid);
  $component_id = $component->get('configuration')['id'];

  // We only want to hide the label display checkbox for fields, not regular
  // blocks.
  if (strpos($component_id, 'field_block') !== FALSE) {
    $form['settings']['label_display']['#type'] = 'hidden';
    $form['settings']['label_display']['#default_value'] = FALSE;
  }

  $form['settings']['formatter']['label']['#options']['above_h2'] = t('Above H2');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hs_blocks_form_layout_builder_add_block_alter(&$form, FormStateInterface $form_state) {
  [, , , $field_id] = $form_state->getBuildInfo()['args'];

  // We only want to hide the label display checkbox for fields, not regular
  // blocks.
  if (strpos($field_id, 'field_block') !== FALSE) {
    $form['settings']['label_display']['#type'] = 'hidden';
    $form['settings']['label_display']['#default_value'] = FALSE;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hs_blocks_preprocess_block__layout_builder(&$variables) {
  if (!empty($variables['content']['#title'])) {
    $variables['content']['#title'] = $variables['configuration']['label'];
  }

  // Set the block label empty, and we'll set it if the formatter is set to an
  // H2. This prevents the need for any changes to a template.
  $variables['label'] = '';
  if (!empty($variables['configuration']['formatter']['label']) && $variables['configuration']['formatter']['label'] == 'above_h2') {
    $variables['content']['#label_display'] = 'hidden';
    $variables['label'] = $variables['configuration']['label'];
  }
}

/**
 * Set screen reader text for social media icons in
 * 'Connect With Us' block content.
 */
function hs_blocks_update_9801() {
  /** @var \Drupal\block_content\Entity\BlockContent $block_content */
  $blocks = \Drupal::entityTypeManager()->getStorage('block_content')->loadByProperties(['uuid' => '985ebfed-df24-487c-8602-51dc3bdcde84']);
  $block_content = reset($blocks);
  $body = $block_content->body->value ?? '';
  // Block does not exist or does not have any social media icons.
  if (empty($block_content) || !str_contains($body, 'fab')) {
    return;
  }

  // Parse through each potential social media link.
  $array_content = explode('<a', $body);
  $updated_content = [];

  foreach($array_content as $content) {
    preg_match_all('#\bhttps?://[^,\s()<>]+(?:\([\w\d]+\)|([^,[:punct:]\s]|/))#', $content, $url);
    $url = $url[0][0] ?? '';
    // Has a fontawesome brands icon, try to extract social media link.
    $contain_social_media = str_contains($content, 'fab');
    // Has a link, fontawesome icon, and is not a direct email nor entity link, assume it's for subscription page.
    $is_subscribe_link = str_contains($content, 'href') && str_contains($content, 'fa') && !str_contains($content, 'mailto') && !str_contains($content, 'data-entity');
    $social_media_type = '';
    // If string contains a valid url and it's using an icon.
    if (!empty($url) && $contain_social_media) {
      $url_components = parse_url($url);
      $host = $url_components['host'] ?? '';
      // Get only domain name.
      $host_name = str_replace('www.', '', $host);
      // if defined then it's a non-social media url.
      if (str_contains($host_name, 'spotify')) {
        $social_media_type = 'spotify';
      }
      else {
        $social_media_type = substr_replace($host_name, '', strpos($host_name, '.'), strlen($host_name));
      }
      $social_media_type = 'on ' . $social_media_type;
    }
    elseif ($is_subscribe_link) {
      // Assume that link is to a subscribe page
      // and not a direct email link.
      $social_media_type = 'by email';
    }
    else {
      // No social media type link found
      // skip to next line.
      $updated_content[] = $content;
      continue;
    }
    // Insert string and store updated value.
    $accessiblity_string = '<span class="hs_connectwithus__icon-text">Connect with us ' . $social_media_type . '</span>';
    $insert_span_index = strpos($content, '>') + 1;
    $updated_content[] = substr_replace($content, $accessiblity_string, $insert_span_index, 0);
  }
  // Combine updated content array back into single string.
  $content = implode('<a', $updated_content);
  $block_content->set('body', $content);
  $block_content->save();
}
