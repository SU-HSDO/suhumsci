<?php

/**
 * @file
 * Contains hs_config_prefix.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Config\Entity\ConfigEntityBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\eck\Entity\EckEntityType;
use Drupal\Core\Config\Entity\ConfigEntityInterface;

/**
 * Implements hook_help().
 */
function hs_config_prefix_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the hs_config_prefix module.
    case 'help.page.hs_config_prefix':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Prefix any configuration entities with a specified string') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hs_config_prefix_form_node_type_add_form_alter(&$form, FormStateInterface $form_state) {
  $form['#validate'][] = 'hs_config_prefix_form_node_type_add_form_validate';
}

/**
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function hs_config_prefix_form_node_type_add_form_validate(&$form, FormStateInterface $form_state) {
  if ($form_state->getErrors()) {
    return;
  }
  // Special help is needed when adding a node type because after submission, it
  // redirects to the node manage fields page based on the form values instead
  // of the type's id value.
  $id = $form_state->getValue('type');
  $prefix = \Drupal::config('hs_config_prefix.settings')->get('prefix');

  // Check if manually entered prefix exists.
  if ($prefix && strpos($id, $prefix) !== 0) {
    $form_state->setValue('type', "{$prefix}{$id}");
  }
}

/**
 * Implements hook_entity_presave().
 */
function hs_config_prefix_entity_presave(EntityInterface $entity) {
  if ($entity->isNew() && $entity instanceof ConfigEntityBase) {
    $exclude_config_types = [
      'entity_form_display',
      'entity_view_display',
      'field_storage_config',
    ];

    if (\Drupal::moduleHandler()->moduleExists('eck')) {
      $eck_types = array_keys(EckEntityType::loadMultiple());

      // ECK appends _type to the machine name of each entity type it has, so we
      // have to do the same.
      foreach ($eck_types as &$type) {
        $type = "{$type}_type";
      }
      $exclude_config_types = array_merge($exclude_config_types, $eck_types);
    }

    if (!in_array($entity->getEntityTypeId(), $exclude_config_types)) {
      try {
        hs_config_prefix_set_entity_id($entity);
      }
      catch (Exception $e) {
        \Drupal::logger('hs_config_prefix')
          ->error('Unable to modify entity id on %type: %id', [
            '%type' => $entity->getEntityTypeId(),
            '%id' => $entity->id(),
          ]);
      }
    }
  }
}

/**
 * Modify the id of the entity to have the prefix form the config.
 *
 * @param \Drupal\Core\Config\Entity\ConfigEntityInterface $entity
 *   Entity to modify.
 *
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function hs_config_prefix_set_entity_id(ConfigEntityInterface $entity) {
  $entity_definition = \Drupal::entityTypeManager()
    ->getDefinition($entity->getEntityTypeId());

  // Different entity types have different keys for the id attribute.
  $id_key = $entity_definition->getKey('id');
  $prefix = \Drupal::config('hs_config_prefix.settings')->get('prefix');

  $entity_id = explode('.', $entity->id());
  $item_id = array_pop($entity_id);

  // Check if manually entered prefix exists.
  if (strpos($item_id, $prefix) !== 0) {
    $entity_id[] = $prefix . $item_id;
    $entity->set($id_key, implode('.', $entity_id));
  }
}
