<?php

/**
 * @file
 * hs_events.install
 */

use Drupal\Core\Config\FileStorage;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Cache\Cache;
use Drupal\node\Entity\Node;

/**
 * Implements hook_install().
 */
function hs_events_install() {
  /** @var \Drupal\Core\Extension\ModuleInstaller $module_installer */
  $module_installer = \Drupal::service('module_installer');
  try {
    $module_installer->install(['hs_events_display']);
  }
  catch (Exception $e) {
    \Drupal::messenger()
      ->addError(t('Unable to set initial display settings for Events'));
  }

}

/**
 * Manually write the speaker configs to change field type.
 */
function hs_events_update_8001() {
  // Manually change the speaker field storage.
  $source = new FileStorage('../config/default');
  /** @var \Drupal\Core\Config\CachedStorage $config_storage */
  $config_storage = \Drupal::service('config.storage');
  $name = 'field.storage.node.field_hs_event_speaker';
  $config_storage->write($name, $source->read($name));
  $name = 'field.field.node.hs_event.field_hs_event_speaker';
  $config_storage->write($name, $source->read($name));
  drupal_flush_all_caches();

  $definitions = \Drupal::database()->select('key_value', 'k')
    ->fields('k', ['value'])
    ->condition('name', 'node.field_storage_definitions')
    ->execute()->fetchField();
  $definitions = unserialize($definitions);
  $field_storage = FieldStorageConfig::load('node.field_hs_event_speaker');
  $definitions['field_hs_event_speaker'] = $field_storage;
  \Drupal::database()
    ->update('key_value')
    ->fields(['value' => serialize($definitions)])
    ->condition('name', 'node.field_storage_definitions')
    ->execute();

  $map = \Drupal::database()->select('key_value', 'k')
    ->fields('k', ['value'])
    ->condition('collection', 'entity.definitions.bundle_field_map')
    ->condition('name', 'node')
    ->execute()->fetchField();
  $map = unserialize($map);
  $map['field_hs_event_speaker']['type'] = 'entity_reference';
  \Drupal::database()
    ->update('key_value')
    ->fields(['value' => serialize($map)])
    ->condition('collection', 'entity.definitions.bundle_field_map')
    ->condition('name', 'node')
    ->execute();

  Cache::invalidateTags(['entity_types']);
}

/**
 * Rebuild entity usage statistics for event speakers.
 *
 * @see \Drupal\entity_usage\Form\BatchUpdateForm::updateSourcesBatchWorker()
 */
function hs_events_update_8002() {
  // Flush caches so we clear up any field cacheing from the previous update.
  drupal_flush_all_caches();
  $entity_storage = \Drupal::entityTypeManager()->getStorage('node');

  $nids = \Drupal::entityQuery('node')
    ->condition('type', 'hs_event')
    ->execute();
  $events = Node::loadMultiple($nids);

  foreach ($events as $entity) {
    // Track all revisions and translations of the source entity. Sources
    // are tracked as if they were new entities.
    $result = $entity_storage->getQuery()->allRevisions()
      ->condition($entity->getEntityType()->getKey('id'), $entity->id())
      ->sort($entity->getEntityType()->getKey('revision'), 'DESC')
      ->execute();
    $revision_ids = array_keys($result);

    foreach ($revision_ids as $revision_id) {
      /** @var \Drupal\Core\Entity\EntityInterface $entity_revision */
      if (!$entity_revision = $entity_storage->loadRevision($revision_id)) {
        continue;
      }

      \Drupal::service('entity_usage.entity_update_manager')
        ->trackUpdateOnCreation($entity_revision);
    }

  }

  // Now that we have tracked the event speakers, lets clean up the ECK
  // entities that are not being used anywhere.
  _he_field_helpers_clean_eck();
}

/**
 * Fix speaker field configuration.
 */
function hs_events_update_8003() {
  $tables = [
    'node__field_hs_event_speaker',
    'node_revision__field_hs_event_speaker',
  ];
  $fields = [
    'field_hs_event_speaker_depth',
    'field_hs_event_speaker_options',
  ];
  $field_data = [];
  // Remove the unwanted columns from the database.
  foreach ($tables as $table) {
    foreach ($fields as $field) {
      if (\Drupal::database()->schema()->fieldExists($table, $field)) {
        \Drupal::database()->schema()->dropField($table, $field);
      }
    }
    $query = \Drupal::database()->select($table, 't')->fields('t')->execute();

    // Gather all the field data to be inserted after we rebuild the field
    // storage.
    while ($row = $query->fetchAssoc()) {
      $field_data[$table][] = $row;
    }
    \Drupal::database()->truncate($table)->execute();
  }

  // Resave the field so it resets the schema in the field data tables.
  $field = FieldStorageConfig::load('node.field_hs_event_speaker');
  $field->save();

  // Insert all the old data back into the database.
  foreach ($field_data as $table => $rows) {
    foreach ($rows as $row) {
      \Drupal::database()->insert($table)->fields($row)->execute();
    }
  }

}
