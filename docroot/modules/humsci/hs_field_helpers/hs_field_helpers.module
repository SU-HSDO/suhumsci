<?php

/**
 * @file
 * hs_field_helpers.module
 */

use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FormatterInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Layout\LayoutDefinition;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\eck\Entity\EckEntity;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\FieldStorageConfigInterface;
use Drupal\field_permissions\Plugin\FieldPermissionTypeInterface;
use Drupal\hs_field_helpers\Plugin\Field\FieldFormatter\AddToCalFormatter;
use Drupal\hs_field_helpers\Plugin\Field\FieldFormatter\EntityTitleHeading;
use Drupal\hs_field_helpers\Plugin\Field\FieldFormatter\HsViewfieldFormatterDefault;
use Drupal\hs_field_helpers\Plugin\Field\FieldType\DisplayModeField;
use Drupal\hs_field_helpers\Plugin\Field\FieldWidget\DateTimeYearOnly;
use Drupal\hs_field_helpers\Plugin\Field\FieldWidget\HsViewfieldWidgetSelect;
use Drupal\layout_builder\Entity\LayoutBuilderEntityViewDisplay;
use Drupal\ui_patterns\Element\PatternContext;
use Drupal\ui_patterns\UiPatterns;

/**
 * Implements hook_preprocess_HOOK().
 */
function hs_field_helpers_preprocess_media_oembed_iframe(&$variables) {
  try {
    if (
      !empty($variables['resource']) &&
      $variables['resource']->getProvider()->getName() == 'YouTube'
    ) {
      $iframe = (string) $variables['media'];
      $variables['media'] = preg_replace('/src="(.[^"]+)"/', 'src="$1&modestbranding=1&rel=0"', $iframe);
    }
  } catch (\Throwable $e) {
    // Nothing to do.
  }
}

/**
 * Implements hook_library_info_alter().
 */
function hs_field_helpers_library_info_alter(&$libraries, $extension) {
  if ($extension == 'addtocal' && isset($libraries['addtocal'])) {
    unset($libraries['addtocal']['css']);
    $libraries['addtocal']['dependencies'][] = 'hs_field_helpers/addtocal';
  }
}

/**
 * Implements hook_field_widget_info_alter().
 */
function hs_field_helpers_field_widget_info_alter(array &$info) {
  $info['options_select']['field_types'][] = 'display_mode_field';

  if (isset($info['viewfield_select'])) {
    $info['viewfield_select']['class'] = HsViewfieldWidgetSelect::class;
  }

  if (isset($info['datetime_year_only'])) {
    $info['datetime_year_only']['class'] = DateTimeYearOnly::class;
  }
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function hs_field_helpers_field_formatter_info_alter(array &$info) {
  $info['list_default']['field_types'][] = 'display_mode_field';

  if (isset($info['viewfield_default'])) {
    $info['viewfield_default']['class'] = HsViewfieldFormatterDefault::class;
  }
  if (isset($info['addtocal_view'])) {
    $info['addtocal_view']['class'] = AddToCalFormatter::class;
  }
  if (isset($info['entity_title_heading'])) {
    $info['entity_title_heading']['class'] = EntityTitleHeading::class;
  }
}

/**
 * Implements hook_field_info_alter().
 */
function hs_field_helpers_field_info_alter(&$info) {
  if (isset($info['viewfield'])) {
    $info['viewfield']['class'] = 'Drupal\hs_field_helpers\Plugin\Field\FieldType\HsViewfieldItem';
  }
}

/**
 * Implements hook_help().
 */
function hs_field_helpers_help($route_name, RouteMatchInterface $route_match) {
  if (strpos($route_name, 'entity.entity_view_display.') === FALSE) {
    return;
  }

  /** @var \Drupal\field\Entity\FieldConfig $field */
  foreach (FieldConfig::loadMultiple() as $field) {
    if ($field->getType() != 'display_mode_field') {
      continue;
    }

    $entity_type = $field->getTargetEntityTypeId();
    $entity_bundle = $field->getTargetBundle();
    $field_view_modes = $field->getFieldStorageDefinition()
      ->getSetting('allowed_values');

    // Display help text to the user configuring the view mode. This prevents
    // needing to switch back and forth to remember which display "label" is
    // being edited.
    foreach ($field_view_modes as $display_id => $label) {
      if ($route_match->getParameter('bundle') == $entity_bundle &&
        $route_match->getParameter('entity_type_id') == $entity_type &&
        $route_match->getParameter('view_mode_name') == $display_id
      ) {
        return t('This display mode is displayed to the user as %label', ['%label' => $label]);
      }
    }
    $field->getEntityTypeId();
  }
}

/**
 * Implements hook_entity_view_mode_alter().
 */
function hs_field_helpers_entity_view_mode_alter(&$view_mode, EntityInterface $entity, $context) {
  if ($entity instanceof FieldableEntityInterface) {
    $view_mode = DisplayModeField::getDisplayMode($entity) ?: $view_mode;
  }
}

/**
 * Implements hook_preprocess().
 */
function hs_field_helpers_preprocess(&$variables, $hook) {
  if (\Drupal::service('router.admin_context')->isAdminRoute()) {
    return;
  }
  // UI Patterns cleanup to remove regions that don't have anything to render.
  if (isset($variables['context']) && $variables['context'] instanceof PatternContext) {
    $pattern_id = str_replace('pattern_', '', $hook);
    // Table patterns need to keep empty regions.
    if (strpos($pattern_id, 'table') === FALSE && !$variables['context']->isOfType('views_row')) {
      _hs_field_helpers_cleanup_pattern_regions($variables, $pattern_id);
    }
  }

  // Layout Builder cleanup.
  // Each layout has its own preprocess hook. So we have to use generic hook.
  if (isset($variables['layout']) && $variables['layout'] instanceof LayoutDefinition) {
    hs_fields_helpers_cleanup_layout_builder($variables);
  }
}

/**
 * Helper function to clean up empty layout builder regions.
 *
 * @param array $variables
 *   Preprocess variables.
 */
function hs_fields_helpers_cleanup_layout_builder(array &$variables) {
  // This attribute exists when on the layout management page. We don't want
  // to clean up the regions when on that page because it will break the UI.
  if (!empty($variables['attributes']['data-layout-update-url'])) {
    return;
  }
  foreach (Element::children($variables['content']) as $region) {

    // Some blocks such as a menu block don't have any output, but the layout
    // still outputs an empty container for the block that has no content.
    // So lets find out if they are empty, and clean them up.
    foreach (Element::children($variables['content'][$region]) as $item_id) {
      if (empty($variables['content'][$region][$item_id]['#theme'])) {
        unset($variables['content'][$region][$item_id]);
      }
    }

    // Clean up empty regions after we've cleaned up the blocks in the region.
    if (empty(Element::children($variables['content'][$region]))) {
      unset($variables['content'][$region]);
    }
  }
}

/**
 * Remove empty regions to prevent unwanted markup in patterns.
 *
 * @param array $pattern
 *   Pattern render array.
 * @param string $pattern_id
 *   Pattern ID being used.
 */
function _hs_field_helpers_cleanup_pattern_regions(array &$pattern, $pattern_id) {
  try {
    $pattern_definition = UiPatterns::getPatternDefinition($pattern_id);
  } catch (Exception $e) {
    // No pattern found.
    return;
  }
  foreach (array_keys($pattern_definition->getFieldsAsOptions()) as $region) {
    if (empty($pattern[$region]) || !is_array($pattern[$region]) || isset($pattern[$region]['#theme'])) {
      $rendered = \Drupal::service('renderer')->render($pattern[$region]);

      // Remove all wrapper divs so we can check if the region actually has any
      // visible output.
      $rendered = preg_replace("/<div.*?>(.*?)<\/div>/s", "$1", $rendered);
      $rendered = preg_replace("/<div>(.*?)<\/div>/s", "$1", $rendered);
      if (empty(trim($rendered))) {
        unset($pattern[$region]);
      }

      continue;
    }
    if (!_hs_field_helpers_render_array_has_content($pattern[$region])) {
      unset($pattern[$region]);
    }
  }
}

/**
 * Find out if an element has content without actually rendering it out.
 *
 * @param mixed $data
 *   Element to check without rendering.
 *
 * @return bool
 *   Has something to trigger rendering.
 */
function _hs_field_helpers_render_array_has_content($data) {
  if (!is_array($data)) {
    return FALSE;
  }

  if (isset($data['#field_type']) || isset($data['#theme']) || isset($data['#type']) || isset($data['#markup'])) {
    return TRUE;
  }
  foreach (Element::children($data) as $item) {
    if (_hs_field_helpers_render_array_has_content($data[$item])) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hs_field_helpers_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\field\Entity\FieldConfig $field_config */
  $field_config = $form_state->getBuildInfo()['callback_object']->getEntity();
  // Add an option to exclude views from the form. The module only has the
  // "allowed views" option. This hides the allowed views and adds the excluded
  // views.
  if ($field_config->getType() == 'viewfield') {
    $form['third_party_settings']['hs_field_helpers']['excluded_views'] = [
      '#type' => 'checkboxes',
      '#title' => t('Excluded views'),
      '#options' => $form['settings']['allowed_views']['#options'],
      '#default_value' => $field_config->getThirdPartySetting('hs_field_helpers', 'excluded_views') ?: [],
    ];
    $form['#validate'][] = 'hs_field_helpers_form_field_config_edit_form_validate';
  }
}

/**
 * Validation handler for field config edit form.
 */
function hs_field_helpers_form_field_config_edit_form_validate(&$form, FormStateInterface $form_state) {
  if ($excluded_views = &$form_state->getValue([
    'third_party_settings',
    'hs_field_helpers',
    'excluded_views',
  ])) {
    // Remove keys on the values to make the config cleaner.
    $excluded_views = array_filter(array_values($excluded_views));
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function hs_field_helpers_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  $build_info = $form_state->getBuildInfo();
  if (!isset($build_info['base_form_id']) || $build_info['base_form_id'] != 'node_form') {
    return;
  }
  /** @var \Drupal\Core\Field\WidgetBaseInterface $widget */
  $widget = $context['widget'];
  switch ($widget->getPluginId()) {
    case 'daterange_datelist':
    case 'daterange_default':
      // To simulate the same field functionality as we had in D7, we need to
      // add a checkbox and validation handlers.
      // Adds wrappers so we can easily find the parts with jQuery.
      $element['value']['#prefix'] = '<div class="start-date">';
      $element['value']['#suffix'] = '</div>';
      $element['end_value']['#prefix'] = '<div class="end-date">';
      $element['end_value']['#suffix'] = '</div>';

      $show_end = FALSE;

      // Compare start and end dates to determine default checkbox value.
      if (!empty($element['value']['#default_value']) && !empty($element['end_value']['#default_value'])) {
        /** @var \DateInterval $diff */
        $diff = $element['value']['#default_value']->diff($element['end_value']['#default_value']);
        $show_end = (bool) (int) $diff->format('%Y%M%D%H%I%S');
      }

      $element['show_end'] = [
        '#type' => 'checkbox',
        '#title' => t('Show End Date'),
        '#default_value' => $show_end,
        '#attributes' => ['class' => ['show-end-date']],
      ];

      $element['#attached']['library'][] = 'hs_field_helpers/admin';
      array_unshift($element['#element_validate'], 'hs_field_helpers_node_validate_date');

      break;

    case 'link_default':
      $element['uri']['#element_validate'][] = 'hs_field_helpers_validate_link_uri';
      break;

    case 'paragraphs':
      if (!empty($element['behavior_plugins']) && !empty(Element::children($element['behavior_plugins']))) {
        $element['#attached']['library'][] = 'hs_field_helpers/paragraph_behaviors';
      }
      break;
  }
  $element['#attached']['library'][] = 'hs_field_helpers/admin';
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function hs_field_helpers_field_widget_file_generic_form_alter(&$element, FormStateInterface $form_state, $context) {
  // For some reason, the library doesn't get added so we add it here.
  $element['#attached']['library'][] = 'file/drupal.file';
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function hs_field_helpers_field_widget_insert_file_form_alter(&$element, FormStateInterface $form_state, $context) {
  // For some reason, the library doesn't get added so we add it here.
  $element['#attached']['library'][] = 'file/drupal.file';
}

/**
 * Modify the link field's url entry to decode local urls.
 *
 * @param array $element
 *   Url text form element.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Current form state.
 * @param array $form
 *   Complete form.
 */
function hs_field_helpers_validate_link_uri(array &$element, FormStateInterface $form_state, array $form) {
  if (strpos($element['#value'], '/') === 0) {
    $form_state->setValueForElement($element, urldecode($element['#value']));
  }
}

/**
 * Validation for event dates in nodes form.
 */
function hs_field_helpers_node_validate_date(array &$element, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Entity\FieldableEntityInterface $entity */
  $entity = $form_state->getBuildInfo()['callback_object']->getEntity();

  foreach ($entity->getFieldDefinitions() as $field_definition) {
    if ($field_definition->getType() == 'daterange') {
      $date = $form_state->getValue($element['#parents']);

      // If the start value is populated but end is empty, copy the start date
      // to the end date to pass validation.
      if (!empty($date['value']) && (!$element['show_end']['#value'] || empty($date['end_value']))) {
        $date['end_value'] = $date['value'];
        $element['end_value']['#value'] = $element['value']['#value'];

        /** @var \Drupal\Core\Datetime\DrupalDateTime $date */
        $form_state->setValue($element['#parents'], $date);
      }
    }
  }
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function hs_field_helpers_field_formatter_settings_summary_alter(&$summary, $context) {
  $inline = $context['formatter']->getThirdPartySetting('hs_field_helpers', 'inline_contents');
  if (!empty($inline)) {
    $summary[] = t('Inline Contents: @inline', ['@inline' => $inline ? t('Yes') : t('No')]);
  }
}

/**
 * Implements hook_field_formatter_third_party_settings_form().
 *
 * Adds a 'class' textfield to all formatters.
 */
function hs_field_helpers_field_formatter_third_party_settings_form(FormatterInterface $plugin, FieldDefinitionInterface $field_definition, $view_mode, $form, FormStateInterface $form_state) {
  $element['inline_contents'] = [
    '#type' => 'checkbox',
    '#title' => t('Inline Contents'),
    '#description' => t('Display the field items as comma separated values.'),
    '#default_value' => $plugin->getThirdPartySetting('hs_field_helpers', 'inline_contents'),
  ];
  return $element;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * The field_formatter_class module doesn't work on layout builder fields, so we
 * have to add our classes on our own.
 *
 * @see field_formatter_class_preprocess_field()
 */
function hs_field_helpers_preprocess_field(&$variables) {
  // Get a few convenient handles.
  $entity = $variables['element']['#object'];
  $field_name = $variables['element']['#field_name'];
  $view_mode = $variables['element']['#view_mode'];
  $field_config = _hs_field_helpers_get_view_mode_component($entity, $view_mode, $field_name);

  // Add class for whole field.
  if (!empty($field_config['formatter']['third_party_settings']['field_formatter_class'])) {
    $class = $field_config['formatter']['third_party_settings']['field_formatter_class']['class'];

    /** @var \Drupal\Core\Entity\EntityInterface $object */
    $object = $variables['element']['#object'];
    $class = \Drupal::service('token')
      ->replace($class, [$object->getEntityTypeId() => $object], ['clear' => TRUE]);
    $variables['attributes']['class'][] = Html::cleanCssIdentifier($class);
  }

  if ($field_name == 'field_media_google_form') {
    /** @var \Drupal\media\MediaInterface $media_entity */
    $media_entity = $variables['element']['#object'];
    $height = NULL;
    if ($media_entity->hasField('field_media_google_height')) {
      $height = $media_entity->get('field_media_google_height')->getString();
    }

    foreach ($variables['items'] as &$item) {
      $src = &$item['content']['#attributes']['src'];
      $src .= '?embedded=true';
      $src = str_replace('?usp=sf_link', '', $src);

      if ($height) {
        $item['content']['#attributes']['height'] = $height;
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 *
 * Adds a theme suggestion to make all contents be inline. Then our theme can
 * take that suggestion and run with it.
 */
function hs_field_helpers_theme_suggestions_field(array $variables) {
  // Get a few convenient handles.
  /** @var \Drupal\Core\Entity\FieldableEntityInterface $entity */
  $entity = $variables['element']['#object'];
  $field_name = $variables['element']['#field_name'];
  $view_mode = $variables['element']['#view_mode'];
  $field_config = _hs_field_helpers_get_view_mode_component($entity, $view_mode, $field_name);

  $suggestions = [];
  // Add class for whole field.
  if (
    !empty($field_config['formatter']['third_party_settings']['hs_field_helpers'])
    && $field_config['formatter']['third_party_settings']['hs_field_helpers']['inline_contents']
  ) {
    $entity_type = $entity->getEntityTypeId();
    $suggestions = [
      'field__inline_contents',
      "field__inline_contents__$field_name",
      "field__inline_contents__$entity_type",
    ];
  }
  return $suggestions;
}

/**
 * A field can be nested in a layout builder section, so lets go get it.
 *
 * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
 *   The entity in question.
 * @param string $view_mode
 *   View mode to build.
 * @param string $field_name
 *   Field name to find.
 *
 * @return array|null
 *   Formatter settings of the field if found.
 */
function _hs_field_helpers_get_view_mode_component(FieldableEntityInterface $entity, $view_mode, $field_name) {
  /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $entity_display */
  $entity_display = EntityViewDisplay::collectRenderDisplay($entity, $view_mode);

  $entity_type = $entity_display->getTargetEntityTypeId();
  $entity_bundle = $entity_display->getTargetBundle();
  $id = "field_block:$entity_type:$entity_bundle:$field_name";
  $static_id = "$id-{$entity->id()}";
  $builds = &drupal_static(__FUNCTION__);

  // We've already found the field component, return that.
  if (isset($builds[$static_id])) {
    return $builds[$static_id];
  }

  if (!($entity_display instanceof LayoutBuilderEntityViewDisplay) || !$entity_display->isLayoutBuilderEnabled()) {
    // If the entity is not using layout builder, we can simply get the
    // component. We use the key formatter to make it identical to the way
    // layout builder has the configurations array.
    return ['formatter' => $entity_display->getComponent($field_name)];
  }

  // Dive into the layout builder sections to find the component we need.
  /** @var \Drupal\layout_builder\Section $section */
  foreach ($entity_display->getSections() as $section) {
    /** @var \Drupal\layout_builder\SectionComponent $component */
    foreach ($section->getComponents() as $component) {
      $component_config = $component->get('configuration');
      if ($component_config['id'] == $id) {
        $builds[$static_id] = $component_config;
        return $component_config;
      }
    }
  }
}

/**
 * Implements hook_cron().
 */
function hs_field_helpers_cron() {
  $deleted = _he_field_helpers_clean_eck();
  $logger = \Drupal::logger('hs_field_helpers');
  foreach ($deleted as $entity_type => $ids) {
    $logger->info(t('Deleted %count entities due to no usages. %type: %ids'), [
      '%count' => count($ids),
      '%type' => $entity_type,
      '%ids' => implode(', ', $ids),
    ]);
  }
}

/**
 * Deletes any ECK entities that don't have any usage of them anywhere.
 *
 * With entity reference fields, entity_usage module tracks the use of ECK
 * entities. Because of that we can safely delete these entities that have no
 * usage statitistics of them. Mostly this is from doing a migration rollback.
 * Deleting a node manually seems to clean the ECK entities.
 *
 * @return array
 *   Keyed array of entity type to entity ids that were deleted.
 */
function _he_field_helpers_clean_eck() {
  /** @var \Drupal\entity_usage\EntityUsage $entity_usage */
  $entity_usage = \Drupal::service('entity_usage.usage');
  $deleted = [];
  foreach (_hs_field_helpers_get_cleanup_entity_types() as $entity_type) {
    $entity_storage = \Drupal::entityTypeManager()
      ->getStorage($entity_type);
    $entity_ids = $entity_storage->getQuery()
      ->accessCheck(FALSE)
      ->execute();

    // Chunk it up so that we don't try to load every single entity at once.
    $chuncked_ids = array_chunk($entity_ids, 100);

    foreach ($chuncked_ids as $entity_ids) {
      $entities = $entity_storage->loadMultiple($entity_ids);

      // Delete all ECK entities that aren't being used. Some ECK's don't get
      // deleted if they were imported by a migration.
      foreach ($entities as $entity) {
        if (empty($entity_usage->listSources($entity))) {
          $deleted[$entity_type][] = $entity->id();
          $entity->delete();
        }
      }
    }
  }
  return $deleted;
}

/**
 * Get the entity types to clean if there are no usages.
 *
 * @return string[]
 *   Entity type ids.
 */
function _hs_field_helpers_get_cleanup_entity_types(): array {
  $cleanup_types = ['paragraph'];
  $definitions = \Drupal::entityTypeManager()->getDefinitions();
  /** @var \Drupal\Core\Entity\ContentEntityType $entity_type */
  foreach ($definitions as $entity_type_id => $entity_type) {
    // Find all the entity types ECK has available.
    if ($entity_type->getOriginalClass() == EckEntity::class) {
      $cleanup_types[] = $entity_type_id;
    }
  }
  return $cleanup_types;
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function hs_field_helpers_node_presave(EntityInterface $entity) {
  $rabbit_hole = \Drupal::config('rabbit_hole.behavior_settings.node_type_' . $entity->bundle());

  if ($rabbit_hole->get('redirect') && $rabbit_hole->get('allow_override')) {
    /** @var \Drupal\Core\Utility\Token $token_service */
    $token_service = \Drupal::service('token');
    $target = $token_service->replace($rabbit_hole->get('redirect'), ['node' => $entity]);

    $entity->set('rh_action', 'display_page');

    // Check if the token that was provided is actually a url. If it is, then we
    // can set the rabbit hole action to redirect to that url.
    if (is_string($target) && UrlHelper::isValid($target, TRUE)) {
      $entity->set('rh_action', 'bundle_default');
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function hs_field_helpers_field_storage_config_presave(FieldStorageConfigInterface $entity) {
  $permission_type = $entity->getThirdPartySetting('field_permissions', 'permission_type');

  // If the field is configured to be public, we don't need to create an
  // unnecessary dependency on the field_permission module.
  if ($permission_type == FieldPermissionTypeInterface::ACCESS_PUBLIC) {
    $entity->unsetThirdPartySetting('field_permissions', 'permission_type');
    // Reset dependencies.
    $entity->calculateDependencies();
  }
}

/**
 * Implements hook_audio_embed_field_provider_info_alter().
 */
function hs_field_helpers_audio_embed_field_provider_info_alter(&$definitions) {
  $definitions['soundcloud']['class'] = '\Drupal\hs_field_helpers\Plugin\audio_embed_field\Provider\StanfordSoundCloud';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hs_field_helpers_preprocess_ds_entity_view(&$variables) {
  $variables['content']['#pre_render'][] = [
    'Drupal\hs_field_helpers\PreRenderer',
    'preRenderDsEntity',
  ];
}

/**
 * Implements hook_form_alter().
 */
function hs_field_helpers_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (strpos($form_id, 'views_form_') === 0) {
    // Remove the select all since it selects every node, not just the ones
    // from the active filters.
    // @link https://www.drupal.org/project/views_bulk_operations/issues/3055770#comment-13116724
    unset($form['header']['views_bulk_operations_bulk_form']['select_all']);
  }
}
