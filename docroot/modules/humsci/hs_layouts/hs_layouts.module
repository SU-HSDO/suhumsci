<?php

/**
 * @file
 * hs_layouts.module
 */

use Drupal\Component\Utility\Html;
use Drupal\paragraphs\ParagraphInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_plugin_filter_TYPE__CONSUMER_alter().
 */
function hs_layouts_plugin_filter_layout__layout_builder_alter(&$definitions, &$extra, &$consumer) {
  /** @var \Drupal\Core\Layout\LayoutDefinition $definition */
  foreach ($definitions as $id => $definition) {
    if ($definition->getProvider() !== 'hs_layouts') {
      unset($definitions[$id]);
    }
  }
}

/**
 * Implements hook_plugin_filter_TYPE__CONSUMER_alter().
 */
function hs_layouts_plugin_filter_block__layout_builder_alter(&$definitions, &$extra) {
  foreach ($definitions as $id => &$definition) {
    if (strpos($id, 'views_exposed_filter_block') !== FALSE) {
      $view_block = str_replace('views_exposed_filter_block:', 'views_block:', $id);
      if (isset($definitions[$view_block])) {
        $definition['category'] = $definitions[$view_block]['category'];
        $definition['admin_label'] = t('@view: @display <span class="view-form">Exposed form</span>', $definitions[$view_block]['admin_label']->getArguments());
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hs_layouts_preprocess_container(&$variables) {
  if (!empty($variables['element']['layout-section'])) {
    // Add styles to the layout builder admin configuration.
    $variables['#attached']['library'][] = 'hs_layouts/layout_builder_admin';
  }
}

/**
 * Implements hook_preprocess_preprocess_pattern_spotlight().
 */
function hs_layouts_preprocess_pattern_spotlight(&$variables) {
  $paragraph = $variables['context']->getProperty('entity');
  if (
    $paragraph instanceof ParagraphInterface &&
    $paragraph->hasField('field_hs_spotlight_bg') &&
    $paragraph->get('field_hs_spotlight_bg')->count()
  ) {
    $bgValue = $paragraph->get('field_hs_spotlight_bg')->getString();
    $variables['attributes']->addClass(Html::cleanCssIdentifier($bgValue));
  }
}

/**
 * Implements hook_preprocess_preprocess_pattern_accordion().
 */
function hs_layouts_preprocess_pattern_accordion(&$variables) {
  $paragraph = $variables['context']->getProperty('entity');
  if (
    $paragraph instanceof ParagraphInterface &&
    $paragraph->hasField('field_hs_accord_expcol') &&
    !$paragraph->field_hs_accord_expcol->isEmpty() &&
    $paragraph->get('field_hs_accord_expcol')->getString()
  ) {
    $variables['attributes']->addClass('hb-accordion_toggle-all');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hs_layouts_form_entity_view_display_layout_builder_form_alter(&$form) {
  $form['#validate'][] = '_hs_layouts_unique_main_content_section_validate';
}

/**
 * Exactly one section should be set as 'Main Content' in Layout Builder form.
 */
function _hs_layouts_unique_main_content_section_validate(&$form, FormStateInterface $form_state) {
  $main_content_found = FALSE;
  foreach ($form['layout_builder']['#section_storage']->getSections() as $section) {
    if ($section->getLayoutSettings()['main_content'] !== 'none') {
      if ($main_content_found) {
        $form_state->setErrorByName('form', t('Exactly one region should contain the main content id.'));
        break;
      }
      $main_content_found = TRUE;
    }
  }
  if (!$main_content_found) {
    $form_state->setErrorByName('form', t('Exactly one region should contain the main content id.'));
  }

}

/**
 * Implements hook_entity_type_alter().
 */
function hs_layouts_entity_type_alter(array &$entity_types) {
  // Add constraint to the node entity for validating layout builder main
  // content configuration in nodes with overridden layout.
  $entity_types['node']->addConstraint('hs_layouts_unique_main_content');
}
