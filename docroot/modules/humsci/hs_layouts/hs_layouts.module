<?php

/**
 * @file
 * hs_layouts.module
 */

use Drupal\Component\Utility\Html;
use Drupal\paragraphs\ParagraphInterface;

/**
 * Implements hook_plugin_filter_TYPE__CONSUMER_alter().
 */
function hs_layouts_plugin_filter_layout__layout_builder_alter(&$definitions, &$extra, &$consumer) {
  /** @var \Drupal\Core\Layout\LayoutDefinition $definition */
  foreach ($definitions as $id => $definition) {
    if ($definition->getProvider() !== 'hs_layouts') {
      unset($definitions[$id]);
    }
  }
}

/**
 * Implements hook_plugin_filter_TYPE__CONSUMER_alter().
 */
function hs_layouts_plugin_filter_block__layout_builder_alter(&$definitions, &$extra) {
  foreach ($definitions as $id => &$definition) {
    if (strpos($id, 'views_exposed_filter_block') !== FALSE) {
      $view_block = str_replace('views_exposed_filter_block:', 'views_block:', $id);
      if (isset($definitions[$view_block])) {
        $definition['category'] = $definitions[$view_block]['category'];
        $definition['admin_label'] = t('@view: @display <span class="view-form">Exposed form</span>', $definitions[$view_block]['admin_label']->getArguments());
      }
    }
  }
}

/**
 * Implements hook_preprocess().
 */
function hs_layouts_preprocess(&$variables, $hook) {
  // List of patterns used for collection children elements.
  $collection_patterns = [
    'pattern_horizontal_card',
    'pattern_vertical_card',
    'pattern_vertical_link_card',
    'pattern_vertical_button_card',
    'pattern_spotlight',
    'pattern_timeline',
    'pattern_hero_text_overlay',
    'pattern_gradient-hero',
  ];
  if (!in_array($hook, $collection_patterns)) {
    return;
  }
  // Set heading tag to h2 by default.
  $variables['heading_tag'] = 'h2';
  // Continue only if the pattern is a layout.
  $context = $variables['context'];
  if (!$context->isOfType('layout')) {
    return;
  }
  $paragraph = $context->getProperty('entity');
  if (!$paragraph instanceof ParagraphInterface) {
    return;
  }

  // Get the parent entity of the paragraph.
  $parent = $paragraph->getParentEntity();
  if ($hook === 'pattern_gradient-hero' && $parent instanceof ParagraphInterface) {
    // Gradient hero elements can be within a slider,
    // need to go a level depeer.
    $parent = $parent->getParentEntity();
  }
  if (!($parent instanceof ParagraphInterface) || $parent->bundle() != 'hs_collection') {
    return;
  }
  if ($parent->get('field_title_settings')->value !== 'collection_title_none') {
    // If the paragraph is within a collection and the collection title is
    // set to anything other than 'None', set the heading tag to h3.
    $variables['heading_tag'] = 'h3';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hs_layouts_preprocess_container(&$variables) {
  if (!empty($variables['element']['layout-section'])) {
    // Add styles to the layout builder admin configuration.
    $variables['#attached']['library'][] = 'hs_layouts/layout_builder_admin';
  }
}

/**
 * Implements hook_preprocess_preprocess_pattern_spotlight().
 */
function hs_layouts_preprocess_pattern_spotlight(&$variables) {
  $context = $variables['context'];
  $paragraph = $context->getProperty('entity');
  if ($context->isOfType('views_row')) {
    $variables['attributes']->addClass('hb-spotlight--classic');
  }
  if (
    $paragraph instanceof ParagraphInterface &&
    $paragraph->hasField('field_hs_spotlight_bg') &&
    $paragraph->get('field_hs_spotlight_bg')->count()
  ) {
    $bgValue = $paragraph->get('field_hs_spotlight_bg')->getString();
    $variables['attributes']->addClass(Html::cleanCssIdentifier($bgValue));
  }
  if (
    $paragraph instanceof ParagraphInterface &&
    $paragraph->hasField('field_spotlight_style')
  ) {
    $className = $paragraph->get('field_spotlight_style')->isEmpty() ? 'classic' : $paragraph->get('field_spotlight_style')->getString();
    $variables['attributes']->addClass(Html::cleanCssIdentifier('hb-spotlight--' . $className));
  }
}

/**
 * Implements hook_preprocess_preprocess_pattern_accordion().
 */
function hs_layouts_preprocess_pattern_accordion(&$variables) {
  $paragraph = $variables['context']->getProperty('entity');
  if (!($paragraph instanceof ParagraphInterface)) {
    return;
  }

  if (
    $paragraph->hasField('field_hs_accord_expcol') &&
    !$paragraph->field_hs_accord_expcol->isEmpty() &&
    $paragraph->get('field_hs_accord_expcol')->getString()
  ) {
    $variables['attributes']->addClass('hb-accordion_toggle-all');
  }

  if (
    $paragraph->hasField('field_accordion_style')
  ) {
    switch ($paragraph->get('field_accordion_style')->getString()) {
      case 'secondary':
        $variables['attributes']->addClass('hb-accordion-secondary');
        break;
      case 'light':
        $variables['attributes']->addClass('hb-accordion-light');
        break;
    }
  }
}
