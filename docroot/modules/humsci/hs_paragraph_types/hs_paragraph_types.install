<?php

/**
 * @file
 * Update functions for hs_paragraph_types module.
 */

use Drupal\Core\Site\Settings;
use Drupal\Core\Config\FileStorage;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\filter\Entity\FilterFormat;

/**
 * Store image gallery display mode in paragraph variable.
 */
function hs_paragraph_types_update_9401() {
  // Load field_photoalbum_style field definition exported configuration.
  $config_directory = new FileStorage(Settings::get('config_sync_directory'));
  $field_storage = $config_directory->read('field.storage.paragraph.field_photoalbum_style');
  $field_config = $config_directory->read('field.field.paragraph.stanford_gallery.field_photoalbum_style');

  // Create field_photoalbum_style from exported configuration.
  if (!FieldStorageConfig::loadByName($field_storage['entity_type'], $field_storage['field_name'])) {
    FieldStorageConfig::create($field_storage)->save();
  }
  if (!FieldConfig::loadByName($field_config['entity_type'], $field_config['bundle'], $field_config['field_name'])) {
    FieldConfig::create($field_config)->save();
  }

  // Copy 'display_mode' behavior value to new field in stanford_gallery.
  $paragraphs = \Drupal::entityTypeManager()
    ->getStorage('paragraph')
    ->loadByProperties(['type' => 'stanford_gallery']);
  foreach ($paragraphs as $paragraph) {
    $paragraph->set('field_photoalbum_style', $paragraph->getBehaviorSetting('image_gallery', 'display_mode'));
    $paragraph->save();
  }
}

/**
 * Update user permissions for minimal_html_with_styles text format.
 */
function hs_paragraph_types_update_9402() {

  // Ensure that the filter format exists in order to grant permissions.
  $filter_format_config = \Drupal::service('config.storage.sync')->read('filter.format.minimal_html_with_styles');
  if (!FilterFormat::load('minimal_html_with_styles')) {
    $filter_format = FilterFormat::create($filter_format_config);
    $filter_format->save();
  }

  // Grant permission to use the text format to the roles that require it.
  user_role_grant_permissions('contributor', ['use text format minimal_html_with_styles']);
  user_role_grant_permissions('site_manager', ['use text format minimal_html_with_styles']);
}

/**
 * Update field format for existing postcard paragraph content.
 */
function hs_paragraph_types_update_9403() {
  $db = \Drupal::database();
  $db->update('paragraph__field_hs_postcard_body')
    ->fields([
      'field_hs_postcard_body_format' => 'minimal_html_with_styles',
    ])
    ->execute();
  $db->update('paragraph_revision__field_hs_postcard_body')
    ->fields([
      'field_hs_postcard_body_format' => 'minimal_html_with_styles',
    ])
    ->execute();
}

/**
 * Creates field configuration found in the sync directory.
 */
function hs_paragraph_types_update_10000() {
  $config_storage = \Drupal::service('config.storage.sync');

  /** @var \Drupal\Core\Entity\EntityStorageInterface $field_config_storage */
  $field_config_storage = \Drupal::service('entity_type.manager')->getStorage('field_config');

  /** @var \Drupal\Core\Entity\EntityStorageInterface $fieldConfigStorage */
  $field_storage = \Drupal::service('entity_type.manager')->getStorage('field_storage_config');

  // If storage does not yet exist, create it.
  if (empty($field_storage->load('paragraph.field_hs_collection_uh'))) {
    $field_storage->createFromStorageRecord($config_storage->read('field.storage.paragraph.field_hs_collection_uh'))->save();
  }

  // Create the field instance.
  $config = $field_config_storage->load('paragraph.hs_collection.field_hs_collection_uh');
  if (empty($config)) {
    $field_config_storage->create($config_storage->read('field.field.paragraph.hs_collection.field_hs_collection_uh'))->save();
  }
}

/**
 * Update existing hs_collection content if raised cards is enabled.
 */
function hs_paragraph_types_update_10001(&$sandbox) {

  $paragraph_storage = \Drupal::entityTypeManager()->getStorage('paragraph');
  if (empty($sandbox['ids'])) {
    $sandbox['ids'] = $paragraph_storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('type', 'hs_collection')
      ->condition('field_raised_cards', TRUE)
      ->execute();
    $sandbox['total'] = count($sandbox['ids']);
  }
  $paragraph_ids = array_splice($sandbox['ids'], 0, 10);

  foreach ($paragraph_storage->loadMultiple($paragraph_ids) as $paragraph) {
    $paragraph->set('field_hs_collection_uh', TRUE);
    $paragraph->save();
  }

  $sandbox['#finished'] = count($sandbox['ids']) ? 1 - count($sandbox['ids']) / $sandbox['total'] : 1;
}

/**
 * Set default field_title_settings value for existing content.
 */
function hs_paragraph_types_update_10002(&$sandbox) {
  $paragraph_storage = \Drupal::entityTypeManager()->getStorage('paragraph');
  if (empty($sandbox['ids'])) {
    // Import new field_title_settings configuration.
    $config_storage = \Drupal::service('config.storage.sync');

    /** @var \Drupal\Core\Entity\EntityStorageInterface $field_config_storage */
    $field_config_storage = \Drupal::service('entity_type.manager')->getStorage('field_config');

    /** @var \Drupal\Core\Entity\EntityStorageInterface $fieldConfigStorage */
    $field_storage = \Drupal::service('entity_type.manager')->getStorage('field_storage_config');

    // If storage does not yet exist, create it.
    if (empty($field_storage->load('paragraph.field_title_settings'))) {
      $field_storage->createFromStorageRecord($config_storage->read('field.storage.paragraph.field_title_settings'))->save();
    }

    // Create the field instance.
    $config = $field_config_storage->load('paragraph.hs_collection.field_title_settings');
    if (empty($config)) {
      $field_config_storage->create($config_storage->read('field.field.paragraph.hs_collection.field_title_settings'))->save();
    }

    // Get list of collection paragraphs.
    $sandbox['ids'] = $paragraph_storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('type', 'hs_collection')
      ->execute();
    $sandbox['total'] = count($sandbox['ids']);
  }

  $paragraph_ids = array_splice($sandbox['ids'], 0, 10);

  // Set new field default for existing hs_collection paragraphs.
  foreach ($paragraph_storage->loadMultiple($paragraph_ids) as $paragraph) {
    /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
    $paragraph->set('field_title_settings', 'collection_title_none');
    $paragraph->save();
  }

  $sandbox['#finished'] = count($sandbox['ids']) ? 1 - count($sandbox['ids']) / $sandbox['total'] : 1;
}

/**
 * Creates field configuration for new field.
 */
function hs_paragraph_types_update_10003() {
  $config_storage = \Drupal::service('config.storage.sync');

  /** @var \Drupal\Core\Entity\EntityStorageInterface $field_config_storage */
  $field_config_storage = \Drupal::service('entity_type.manager')->getStorage('field_config');

  /** @var \Drupal\Core\Entity\EntityStorageInterface $fieldConfigStorage */
  $field_storage = \Drupal::service('entity_type.manager')->getStorage('field_storage_config');

  // If storage does not yet exist, create it.
  if (empty($field_storage->load('paragraph.field_hs_clr_bnd_ttl'))) {
    $field_storage->createFromStorageRecord($config_storage->read('field.storage.paragraph.field_hs_clr_bnd_ttl'))->save();
  }

  // Create the field instance.
  $config = $field_config_storage->load('paragraph.hs_clr_bnd.field_hs_clr_bnd_ttl');
  if (empty($config)) {
    $field_config_storage->create($config_storage->read('field.field.paragraph.hs_clr_bnd.field_hs_clr_bnd_ttl'))->save();
  }
}

/**
 * Transfer qualifying content to new field.
 */
function hs_paragraph_types_update_10004(&$sandbox) {
  $paragraph_storage = \Drupal::entityTypeManager()->getStorage('paragraph');
  if (empty($sandbox['ids'])) {
    $sandbox['ids'] = $paragraph_storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('type', 'hs_clr_bnd')
      ->condition('field_hs_clr_bnd_txt', '', '<>')
      ->execute();
    $sandbox['total'] = count($sandbox['ids']);
  }
  $paragraph_ids = array_splice($sandbox['ids'], 0, 10);

  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  foreach ($paragraph_storage->loadMultiple($paragraph_ids) as $paragraph) {
    $string_to_move = $paragraph->get('field_hs_clr_bnd_txt')->getValue()[0]['value'];
    if (strlen($string_to_move) > 105) {
      continue;
    }
    $paragraph->set('field_hs_clr_bnd_ttl', $string_to_move);
    $paragraph->set('field_hs_clr_bnd_txt', '');
    $paragraph->save();
  }
  $sandbox['#finished'] = count($sandbox['ids']) ? 1 - count($sandbox['ids']) / $sandbox['total'] : 1;
}

/**
 * Removes legacy fields from paragraphs.
 */
function hs_paragraph_types_update_10005() {
  // SHS-5661 - remove legacy Banner image(s) with text box Overlay Color field.
  FieldConfig::loadByName('paragraph', 'hs_hero_image', 'field_hs_hero_overlay_color')->delete();
}

/**
 * Remove legacy field field_hs_hero_overlay_color permissions.
 */
function hs_paragraph_types_update_10006() {
  $entityTypeManager = \Drupal::service('entity_type.manager');
  $roles = $entityTypeManager->getStorage('user_role')->loadMultiple();
  if ($roles) {
    foreach (array_keys($roles) as $roleName) {
      if ($roleName != 'administrator') {
        user_role_revoke_permissions($roleName, [
          'create field_hs_hero_overlay_color',
          'edit field_hs_hero_overlay_color',
          'edit own field_hs_hero_overlay_color',
          'view field_hs_hero_overlay_color',
          'view own field_hs_hero_overlay_color',
        ]);
      }
    }
  }
}

/**
 * Moves drag & drop action for paragraphs from 3 dot menu to paragraph toolbar.
 */
function hs_paragraph_types_update_10007() {
  $config_to_update = [
    'core.entity_form_display.node.hs_basic_page.default',
    'core.entity_form_display.node.hs_private_page.default',
  ];
  // Load the configuration from the config/sync directory.
  $config_storage_location = \Drupal::service('config.storage.sync');
  foreach ($config_to_update as $config) {
    $config_data = $config_storage_location->read($config);

    // Check if the form display configuration already exists.
    $entity_type_manager = \Drupal::entityTypeManager();
    /** @var ConfigEntityStorageInterface $config_storage */
    $config_storage = $entity_type_manager->getStorage('entity_form_display');
    $existing_config = $config_storage->load($config_data['id']);

    if ($existing_config) {
      foreach ($config_data as $key => $value) {
        $existing_config->set($key, $value);
      }
      $existing_config->save();
    }
    else {
      // If it doesn't exist, create and save it.
      $config_storage->create($config_data)->save();
    }
  }

}
