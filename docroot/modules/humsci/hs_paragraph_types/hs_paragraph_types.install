<?php

/**
 * @file
 * Update functions for hs_paragraph_types module.
 */

use Drupal\Core\Site\Settings;
use Drupal\Core\Config\FileStorage;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\filter\Entity\FilterFormat;

/**
 * Store image gallery display mode in paragraph variable.
 */
function hs_paragraph_types_update_9401() {
  // Load field_photoalbum_style field definition exported configuration.
  $config_directory = new FileStorage(Settings::get('config_sync_directory'));
  $field_storage = $config_directory->read('field.storage.paragraph.field_photoalbum_style');
  $field_config = $config_directory->read('field.field.paragraph.stanford_gallery.field_photoalbum_style');

  // Create field_photoalbum_style from exported configuration.
  if (!FieldStorageConfig::loadByName($field_storage['entity_type'], $field_storage['field_name'])) {
    FieldStorageConfig::create($field_storage)->save();
  }
  if (!FieldConfig::loadByName($field_config['entity_type'], $field_config['bundle'], $field_config['field_name'])) {
    FieldConfig::create($field_config)->save();
  }

  // Copy 'display_mode' behavior value to new field in stanford_gallery.
  $paragraphs = \Drupal::entityTypeManager()
    ->getStorage('paragraph')
    ->loadByProperties(['type' => 'stanford_gallery']);
  foreach ($paragraphs as $paragraph) {
    $paragraph->set('field_photoalbum_style', $paragraph->getBehaviorSetting('image_gallery', 'display_mode'));
    $paragraph->save();
  }
}

/**
 * Update user permissions for minimal_html_with_styles text format.
 */
function hs_paragraph_types_update_9402() {

  // Ensure that the filter format exists in order to grant permissions.
  $filter_format_config = \Drupal::service('config.storage.sync')->read('filter.format.minimal_html_with_styles');
  if (!FilterFormat::load('minimal_html_with_styles')) {
    $filter_format = FilterFormat::create($filter_format_config);
    $filter_format->save();
  }

  // Grant permission to use the text format to the roles that require it.
  user_role_grant_permissions('contributor', ['use text format minimal_html_with_styles']);
  user_role_grant_permissions('site_manager', ['use text format minimal_html_with_styles']);
}

/**
 * Update field format for existing postcard paragraph content.
 */
function hs_paragraph_types_update_9403() {
  $db = \Drupal::database();
  $db->update('paragraph__field_hs_postcard_body')
    ->fields([
      'field_hs_postcard_body_format' => 'minimal_html_with_styles',
    ])
    ->execute();
  $db->update('paragraph_revision__field_hs_postcard_body')
    ->fields([
      'field_hs_postcard_body_format' => 'minimal_html_with_styles',
    ])
    ->execute();
}

/**
 * Set new fields in color band component form.
 */
function hs_paragraph_types_update_10000() {

  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $clr_bnd_fd */
  $clr_bnd_fd = \Drupal::entityTypeManager()->getStorage('entity_form_display')->load('paragraph.hs_clr_bnd.default');
  $dependencies = $clr_bnd_fd->get('dependencies');
  $dependencies['config'][] = 'field.field.paragraph.hs_clr_bnd.field_hs_clr_bnd_lnk';
  $dependencies['config'][] = 'field.field.paragraph.hs_clr_bnd.field_hs_clr_bnd_ttl';
  $dependencies['module'][] = 'link';
  $clr_bnd_fd->set('dependencies', $dependencies);

  // Update existing field settings.
  $bgc = $clr_bnd_fd->getComponent('field_hs_clr_bnd_bgc');
  $bgc['weight'] = 3;
  $clr_bnd_fd->setComponent('field_hs_clr_bnd_bgc', $bgc);
  $wdth = $clr_bnd_fd->getComponent('field_hs_clr_bnd_wdth');
  $wdth['weight'] = 4;
  $clr_bnd_fd->setComponent('field_hs_clr_bnd_wdth', $wdth);
  $txt = $clr_bnd_fd->getComponent('field_hs_clr_bnd_txt');
  $txt['weight'] = 1;
  $txt['settings']['placeholder'] = '';
  $txt['third_party_settings']['maxlength']['maxlength_js'] = 180;
  $txt['third_party_settings']['maxlength']['maxlength_js_enforce'] = TRUE;
  $clr_bnd_fd->setComponent('field_hs_clr_bnd_txt', $txt);

  // Set new field settings.
  $lnk = [
    'type' => 'link_default',
    'weight' => 2,
    'region' => 'content',
    'settings' => [
      'placeholder_url' => '',
      'placeholder_title' => ''
    ],
    'third_party_settings' => [],
  ];

  $ttl = [
    'type' => 'string_text_field',
    'weight' => 0,
    'region' => 'content',
    'settings' => [
      'size' => 60,
      'placeholder' => '',
    ],
    'third_party_settings' => [
      'maxlength' => [
        'maxlength_js' => 105,
        'maxlength_js_label' => 'Content limited to @limit characters, remaining: <strong>@remaining</strong>',
        'maxlength_js_enforce' => TRUE,
      ],
    ],
  ];
  $clr_bnd_fd->setComponent('field_hs_clr_bnd_lnk', $lnk);
  $clr_bnd_fd->setComponent('field_hs_clr_bnd_ttl', $ttl);

}

/**
 * Set new fields in color band component view.
 */
function hs_paragraph_types_update_10001() {
  /** @var Drupal\Core\Entity\Display\EntityViewDisplayInterface $clr_bnd_vd_preview */
  $clr_bnd_vd_preview = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load('paragraph.hs_clr_bnd.preview');
  $dependencies = $clr_bnd_vd_preview->get('dependencies');
  $dependencies['config'][] = 'field.field.paragraph.hs_clr_bnd.field_clr_bnd_lnk';
  $dependencies['config'][] = 'field.field.paragraph.hs_clr_bnd.field_clr_bnd_ttl';
  $clr_bnd_vd_preview->set('dependencies', $dependencies);
  $clr_bnd_vd_preview->removeComponent('field_clr_bnd_lnk');
  $clr_bnd_vd_preview->removeComponent('field_clr_bnd_ttl');

  /** @var Drupal\Core\Entity\Display\EntityViewDisplayInterface $clr_bnd_vd_default */
  $clr_bnd_vd_default = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load('paragraph.hs_clr_bnd.default');

  // Update dependencies.
  $dependencies = $clr_bnd_vd_default->get('dependencies');
  $dependencies['config'][] = 'field.field.paragraph.hs_clr_bnd.field_hs_clr_bnd_lnk';
  $dependencies = $clr_bnd_vd_default->get('field.field.paragraph.hs_clr_bnd.field_hs_clr_bnd_ttl');
  $dependencies['module'][] = 'link';
  $clr_bnd_vd_default->set('dependencies', $dependencies);

  // Set new field settings.
  $lnk = [
    'type' => 'link',
    'label' => 'above',
    'settings' => [
      'trim_length' => 80,
      'url_only' => FALSE,
      'url_plain' => FALSE,
      'rel' => '',
      'target' => '',
    ],
    'third_party_settings' => [],
    'weight' => 2,
    'region' => 'content',
  ];
  $ttl = [
    'type' => 'string',
    'label' => 'above',
    'settings' => [
      'link_to_entity' => FALSE,
    ],
    'third_party_settings' => [],
    'weight' => 3,
    'region' => 'content',
  ];
  $clr_bnd_vd_default->setComponent('field_hs_clr_bnd_lnk', $lnk);
  $clr_bnd_vd_default->setComponent('field_hs_clr_bnd_ttl', $ttl);
}

/**
 * Move certain content to new field.
 */
function hs_paragraph_types_update_10002($sandbox) {
  $paragraph_storage = \Drupal::entityTypeManager()->getStorage('paragraph');
  if (empty($sandbox['ids'])) {
    $sandbox['ids'] = $paragraph_storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('type', 'hs_clr_bnd')
      ->condition('field_hs_clr_bnd_txt', 105, '>=')
      ->execute();
    $sandbox['total'] = count($sandbox['ids']);
  }
  $paragraph_ids = array_splice($sandbox['ids'], 0, 10);

  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  foreach ($paragraph_storage->loadMultiple($paragraph_ids) as $paragraph) {
    $paragraph->field_hs_clr_bnd_ttl = $paragraph->field_hs_clr_bnd_txt;
    unset($paragraph->field_hs_clr_bnd_txt);
    $paragraph->save();
  }
  $sandbox['#finished'] = count($sandbox['ids']) ? 1 - count($sandbox['ids']) / $sandbox['total'] : 1;
}

