<?php

/**
 * @file
 * Update functions for hs_paragraph_types module.
 */

use Drupal\Core\Site\Settings;
use Drupal\Core\Config\FileStorage;
use Drupal\editor\Entity\Editor;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\filter\Entity\FilterFormat;


/**
 * Implements hook_update_dependencies().
 */
function hs_paragraph_types_update_dependencies() {
  $dependencies = [];
  // There are roles with non-existing permissions between
  // Drupal 9 to Drupal 10, so we run the user update hook first.
  if (function_exists('user_update_10000')) {
    $dependencies['hs_paragraph_types'][9403] = [
      'user' => 10000,
    ];
  }
  return $dependencies;
}

/**
 * Store image gallery display mode in paragraph variable.
 */
function hs_paragraph_types_update_9401() {
  // Load field_photoalbum_style field definition exported configuration.
  $config_directory = new FileStorage(Settings::get('config_sync_directory'));
  $field_storage = $config_directory->read('field.storage.paragraph.field_photoalbum_style');
  $field_config = $config_directory->read('field.field.paragraph.stanford_gallery.field_photoalbum_style');

  // Create field_photoalbum_style from exported configuration.
  if (!FieldStorageConfig::loadByName($field_storage['entity_type'], $field_storage['field_name'])) {
    FieldStorageConfig::create($field_storage)->save();
  }
  if (!FieldConfig::loadByName($field_config['entity_type'], $field_config['bundle'], $field_config['field_name'])) {
    FieldConfig::create($field_config)->save();
  }

  // Copy 'display_mode' behavior value to new field in stanford_gallery.
  $paragraphs = \Drupal::entityTypeManager()
    ->getStorage('paragraph')
    ->loadByProperties(['type' => 'stanford_gallery']);
  foreach ($paragraphs as $paragraph) {
    $paragraph->set('field_photoalbum_style', $paragraph->getBehaviorSetting('image_gallery', 'display_mode'));
    $paragraph->save();
  }
}

/**
 * Update postcard body field text format.
 */
function hs_paragraph_types_update_9402() {
  // Load filter_format and editor exported configuration.
  $config_directory = new FileStorage(Settings::get('config_sync_directory'));
  $filter_format_config = $config_directory->read('filter.format.minimal_html_with_styles');
  $editor_config = $config_directory->read('editor.editor.minimal_html_with_styles');
  if (!FilterFormat::load('minimal_html_with_styles')) {
    $filter_format = FilterFormat::create($filter_format_config);
    $filter_format->save();
  }
  if (!Editor::load('minimal_html_with_styles')) {
    $editor = Editor::create($editor_config);
    $editor->save();
  }

  // Update field_hs_postcard_body field defnition exported configuration.
  $field_config = \Drupal::configFactory()->getEditable('field.field.paragraph.hs_postcard.field_hs_postcard_body');
  $field_config->set('third_party_settings.allowed_formats.allowed_formats.0', 'minimal_html_with_styles');
  $field_config->save();
}

/**
 * Update user permissions for minimal_html_with_styles text format.
 */
function hs_paragraph_types_update_9403() {
  // Update contributor role permissions.
  $role_config = \Drupal::configFactory()->getEditable('user.role.contributor');
  $existing_permissions = $role_config->get('permissions');
  $existing_permissions[] = 'use text format minimal_html_with_styles';
  $role_config->set('permissions', $existing_permissions);
  $role_config->save();

  $role_config = \Drupal::configFactory()->getEditable('user.role.site_manager');
  $existing_permissions = $role_config->get('permissions');
  $existing_permissions[] = 'use text format minimal_html_with_styles';
  $role_config->set('permissions', $existing_permissions);
  $role_config->save();
}

/**
 * Update field format for existing postcard paragraph content.
 */
function hs_paragraph_types_update_9404(&$sandbox = NULL) {
  $storage_handler = \Drupal::entityTypeManager()->getStorage('paragraph');
  if (!isset($sandbox['total'])) {
    // Get all existing instances of hs_postcard.
    $query = $storage_handler->getQuery()
      ->accessCheck(TRUE)
      ->condition('type', 'hs_postcard')
      ->condition('field_hs_postcard_body', NULL, 'IS NOT NULL');
    $total = $query->count()->execute();
    $sandbox['total'] = $total;
    $sandbox['current'] = 0;
  }
  $batch = 25;


  $query = $storage_handler->getQuery()
    ->accessCheck(TRUE)
    ->condition('type', 'hs_postcard')
    ->condition('field_hs_postcard_body', NULL, 'IS NOT NULL')
    ->range($sandbox['current'], $batch);
  $paragraph_ids = $query->execute();

  $postcard_paragraphs = $storage_handler->loadMultiple($paragraph_ids);
  foreach ($postcard_paragraphs as $id => $postcard) {
    // Set correct format.
    $postcard->field_hs_postcard_body->format = 'minimal_html_with_styles';
    $postcard->save();
    $sandbox['current']++;
  }

  if ($sandbox['total'] == 0) {
    $sandbox['#finished'] = 1;
  }
  else {
    $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
  }
}
