<?php

/**
 * @file
 * hs_paragraph_types.module
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_preprocess_HOOK().
 */
function hs_paragraph_types_preprocess_paragraph(&$variables) {
  /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
  $paragraph = $variables['paragraph'];
  $bundle = $paragraph->bundle();

  // Exit early if it's not a relevant bundle.
  if (in_array($bundle, ['hs_collection', 'hs_priv_collection'])) {
    $variables['#attached']['library'][] = 'hs_paragraph_types/hs_collection';
    $variables['attributes']['class'][] = 'hs-paragraph-style';

    if (!$paragraph->hasField('field_bg_color') || !$paragraph->hasField('field_bg_color_width')) {
      return;
    }

    // Replace underscores with hyphens in the bg_color value.
    $bg_color = Html::cleanCssIdentifier($paragraph->get('field_bg_color')->getString());

    // Append "-well" to the bg_color.
    $bg_width = $paragraph->get('field_bg_color_width')->getString();
    if (!empty($bg_color)) {
      $bg_width_class = $bg_width == 'full_width' ? 'well-full-width' : 'well';
      $bg_color .= '-well';
      $variables['attributes']['class'][] = 'hs-paragraph-style--' . $bg_width_class;
      $variables['attributes']['class'][] = 'hs-paragraph-style--' . $bg_color;
    }
  }

  // Set icon for social media links.
  if ($paragraph->bundle() == 'hs_social_media_link' && $paragraph->hasField('field_url') && !$paragraph->get('field_url')->isEmpty()) {
    $provider_url = $paragraph->get('field_url')->first()->getUrl()->toString();
    $providers = [
      [
        'domains' => ['facebook.com', 'fb.com', 'fb.me'],
        'icon_classes' => 'fa-brands fa-square-facebook',
        'name' => 'Facebook',
      ],
      [
        'domains' => ['twitter.com', 'x.com'],
        'icon_classes' => 'fa-brands fa-square-x-twitter',
        'name' => 'Twitter',
      ],
      [
        'domains' => ['linkedin.com', 'lnkd.in'],
        'icon_classes' => 'fa-brands fa-linkedin',
        'name' => 'Linkedin',
      ],
      [
        'domains' => ['instagram.com', 'instagr.am'],
        'icon_classes' => 'fa-brands fa-square-instagram',
        'name' => 'Instagram',
      ],
      [
        'domains' => ['youtube.com', 'youtu.be'],
        'icon_classes' => 'fa-brands fa-square-youtube',
        'name' => 'Youtube',
      ],
      [
        'domains' => ['vimeo.com'],
        'icon_classes' => 'fa-brands fa-vimeo',
        'name' => 'Vimeo',
      ],
      [
        'domains' => ['snapchat.com'],
        'icon_classes' => 'fa-brands fa-square-snapchat',
        'name' => 'Snapchat',
      ],
      [
        'domains' => ['soundcloud.com'],
        'icon_classes' => 'fa-brands fa-soundcloud',
        'name' => 'Soundcloud',
      ],
      [
        'domains' => ['spotify.com'],
        'icon_classes' => 'fa-brands fa-spotify',
        'name' => 'Spotify',
      ],
      [
        'domains' => ['apple.com'],
        'icon_classes' => 'fa-brands fa-apple',
        'name' => 'Apple',
      ],
      [
        'domains' => ['telegram.me', 't.me'],
        'icon_classes' => 'fa-brands fa-telegram',
        'name' => 'Telegram',
      ],
      [
        'domains' => ['mailto:'],
        'icon_classes' => 'fa-solid fa-square-envelope',
        'name' => 'Email',
      ],
      [
        'domains' => ['pinterest.com', 'pin.it'],
        'icon_classes' => 'fa-brands fa-square-pinterest',
        'name' => 'Pinterest',
      ],
      [
        'domains' => ['tiktok.com'],
        'icon_classes' => 'fa-brands fa-tiktok',
        'name' => 'Tiktok',
      ],
    ];

    foreach ($providers as $provider) {
      foreach ($provider['domains'] as $domain) {
        if (strpos($provider_url, $domain) !== FALSE) {
          $variables['icon_classes'] = $provider['icon_classes'];
          $variables['name'] = $provider['name'];
          break 2;
        }
      }
    }

    if (!isset($variables['icon_classes'])) {
      $variables['icon_classes'] = 'fa-solid fa-globe';
      $variables['name'] = '';
      // Use the domain as the name if the provider is not listed above.
      if (preg_match('/https?:\/\/(.+?)\//', $provider_url, $matches)) {
        $variables['name'] = $matches[1];
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hs_paragraph_types_preprocess_field__field_hs_collection_items(&$variables) {
  /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
  $paragraph = $variables['element']['#object'];
  $items_per_row = (int) $paragraph->get('field_hs_collection_per_row')
    ->getString();
  $variables['attributes']['class'][] = "item-per-row--$items_per_row";
  $variables['#attached']['library'][] = 'hs_paragraph_types/hs_collection';
}

/**
 * Implements hook_field_widget_complete_WIDGET_TYPE_form_alter().
 */
function hs_paragraph_types_field_widget_complete_paragraphs_form_alter(array &$field_widget_form, FormStateInterface $form_state, array $context) {
  $elements_to_change = [
    'field_hs_carousel_slides',
    'field_hs_sptlght_sldes',
    'field_hs_page_components',
  ];
  // We need the field name to alter the correct element.
  if (
    empty($field_widget_form['widget']['#field_name']) ||
    !in_array($field_widget_form['widget']['#field_name'], $elements_to_change)
  ) {
    return;
  }
  switch ($field_widget_form['widget']['#field_name']) {
    case 'field_hs_carousel_slides':
      if (empty($field_widget_form['widget']['add_more'])) {
        return;
      }
      // Change the add button label for field_hs_carousel_slides.
      $new_label = 'Banner image with text box';
      $field_widget_form['widget']['add_more']['add_more_button_hs_hero_image']['#value'] = t('Add @type', [
        '@type' => $new_label,
      ]);
      // Change the paragraph type label for hs_hero_image embedded in hs_carousel.
      foreach (Element::children($field_widget_form['widget']) as $key) {
        // Only alter markup in field widget elements.
        if (!is_int($key)) {
          continue;
        }
        $field_widget_form['widget'][$key]['top']['type']['label']['#markup'] = t('@label', ['@label' => $new_label]);
      }
      break;

    case 'field_hs_sptlght_sldes':
      // Change the spotlight widget title.
      $new_label = 'Spotlight(s)';
      $field_widget_form['widget']['#title'] = t('@label', ['@label' => $new_label]);
      if (!empty($field_widget_form['widget']['add_more']['#suffix'])) {
        // Change the paragraph type label for the add more button.
        $field_widget_form['widget']['add_more']['#suffix'] = t('to %type', [
          '%type' => $new_label,
        ]);
      }
      break;

    case 'field_hs_page_components':
      // There are multiple issues with setting and removing the required state
      // from paragraph fields when using the `conditional_fields` module, so
      // use form alter to use the states api instead.
      // @see https://www.drupal.org/project/conditional_fields/issues/3344587
      // Check that hs_collection is the correct paragraph type
      // and correct fields are present.
      foreach (Element::children($field_widget_form['widget']) as $key) {
        if (!is_int($key)) {
          continue;
        }
        $element = $field_widget_form['widget'][$key];
        if (
          empty($element['#paragraph_type']) ||
          $element['#paragraph_type'] != 'hs_collection' ||
          empty($element['subform']['field_title']) ||
          empty($element['subform']['field_title_settings'])
        ) {
          continue;
        }
        // Build title settings name for this component.
        $title_settings_name = '';
        foreach ($element['subform']['field_title_settings']['widget']['#field_parents'] as $delta) {
          if (!empty($title_settings_name)) {
            $delta = "[$delta]";
          }
          $title_settings_name .= $delta;
        }
        $title_settings_name .= '[field_title_settings]';

        $header_conditions = [
          ':input[name="' . $title_settings_name . '"]' => [
            [
              'value' => 'collection_title_visible',
            ],
            'or',
            [
              'value' => 'collection_title_sr_only',
            ],
          ],
        ];

        $element['subform']['field_title']['widget'][0]['value']['#states'] = [
          'required' => [$header_conditions],
          'visible' => [$header_conditions],
        ];
        $field_widget_form['widget'][$key] = $element;
      }
      break;
  }
}

/**
 * Implements hook_field_widget_complete_WIDGET_TYPE_form_alter().
 */
function hs_paragraph_types_field_widget_complete_options_select_form_alter(array &$field_widget_form, FormStateInterface &$form_state, array $context) {
  // Change the default option label for field_accordion_style.
  if (isset($context['items']) && $context['items']->getName() == 'field_accordion_style') {
    $field_widget_form['widget']['#options']['_none'] = t('Default');
  }
  // Change the default option label for field_spotlight_style.
  if (isset($context['items']) && $context['items']->getName() == 'field_spotlight_style') {
    $field_widget_form['widget']['#options']['_none'] = t('Classic');
  }
}
