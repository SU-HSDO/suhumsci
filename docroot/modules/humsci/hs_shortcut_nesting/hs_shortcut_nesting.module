<?php

/**
 * @file
 * hs_shortcut_nesting.module
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\hs_shortcut_nesting\Form\HumsciSetCustomize;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Component\Utility\NestedArray;
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_entity_base_field_info().
 */
function hs_shortcut_nesting_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() == 'shortcut') {
    // Add a parent and a depth column to the shortcut table.
    $fields['parent'] = BaseFieldDefinition::create('integer')
      ->setLabel(t('Parent'))
      ->setDescription(t('Parent menu item.'))
      ->setDefaultValue(0);

    $fields['depth'] = BaseFieldDefinition::create('integer')
      ->setLabel(t('Depth'))
      ->setDescription(t('Depth within the menu.'))
      ->setDefaultValue(0);
  }
  return $fields;
}

/**
 * Implements hook_toolbar().
 */
function hs_shortcut_nesting_toolbar() {
  $items = shortcut_toolbar();
  $configure_link = $items['shortcuts']['tray']['configure'] ?? [];

  $items['shortcuts']['tray'] = [
    '#theme' => 'menu',
    '#menu_name' => 'shortcuts',
    '#items' => [],
  ];

  /** @var \Drupal\shortcut\ShortcutSetInterface $shortcut_set */
  $shortcut_set = shortcut_current_displayed_set();
  $shortcuts = $shortcut_set->getShortcuts();

  // Find the max depth of the menu.
  $max_depth = 0;
  foreach ($shortcuts as $shortcut) {
    $shortcut_depth = $shortcut->get('depth')->getString();
    $max_depth = $shortcut_depth > $max_depth ? $shortcut_depth : $max_depth;
  }

  $menu_items = [];
  $depth = 0;

  // Copy the shortcuts so that we dont loop through every shortcut everytime.
  $remaining_shortcuts = $shortcuts;

  // Loop through the menu depths, constructing each level from the top down.
  while ($depth <= $max_depth) {
    foreach ($remaining_shortcuts as $shortcut) {
      if ($shortcut->get('depth')->getString() == $depth) {

        // Get the path where this shortcut should be rendered.
        $path = hs_shortcut_get_item_parents($shortcuts, $shortcut->id());
        $menu_item = [
          'title' => $shortcut->getTitle(),
          'url' => $shortcut->getUrl(),
        ];

        // Set the new item within the menu.
        NestedArray::setValue($menu_items, $path, $menu_item);
        unset($remaining_shortcuts[$shortcut->id()]);
      }
    }
    $depth++;
  }

  // If the toolbar contains a link to configure the shortcuts, add it to the
  // end of the first level.
  if ($configure_link) {
    $attributes = new Attribute($configure_link['#options']['attributes']);
    $menu_items['configure'] = [
      'title' => $configure_link['#title'],
      'url' => $configure_link['#url'],
      'attributes' => $attributes,
    ];
  }

  $items['shortcuts']['tray']['#items'] = $menu_items;
  $items['shortcuts']['#attached']['library'][] = 'hs_shortcut_nesting/toolbar';

  return $items;
}

/**
 * Get the path of the given link id to build a nested menu.
 *
 * @param \Drupal\shortcut\ShortcutInterface[] $shortcuts
 *   Array of shortcuts.
 * @param int $link_id
 *   Shortcut link id.
 *
 * @return array
 *   Render array parent path.
 */
function hs_shortcut_get_item_parents(array $shortcuts, $link_id) {
  $shortcut = $shortcuts[$link_id];

  // The given shortcut has a parent, lets get it's path.
  if ($parent_id = $shortcut->get('parent')->getString()) {
    $path = hs_shortcut_get_item_parents($shortcuts, $parent_id);
    $path[] = 'below';
    $path[] = $link_id;
    return $path;
  }

  // No parent for this item. It must be at the root of the menu.
  return [$link_id];
}

/**
 * Implements hook_entity_type_build().
 */
function hs_shortcut_nesting_entity_type_build(array &$entity_types) {
  if (isset($entity_types['shortcut_set'])) {
    // Change the entity form to add nesting tabledragging.
    $entity_types['shortcut_set']->setFormClass('customize', HumsciSetCustomize::class);
  }
}
