<?php

/**
 * @file
 * mrc_bricks_helper.module
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\bricks_inline\Plugin\Field\FieldWidget\BricksTreeInlineWidget;

/**
 * Implements hook_field_widget_form_alter().
 */
function mrc_bricks_helper_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  if ($context['widget'] instanceof BricksTreeInlineWidget) {

    $view_mode_display = \Drupal::entityTypeManager()
      ->getStorage('entity_view_display');

    foreach (Element::children($element['entities']) as $delta) {

      // Adding custom preproces function for modifying ief buttons.
      // Only do this when the IEF is open and the form is visible.
      if (!empty($element['entities'][$delta]['form'])) {
        $element['entities'][$delta]['form']['inline_entity_form']['#process'][] = 'mrc_bricks_helper_process';
      }

      $child = &$element['entities'][$delta];

      // Using js to open single brick.
      $element['#attached']['library'][] = 'mrc_bricks_helper/basicpage';

      // If the entity doesn't have the view display, remove it as an option.
      foreach (array_keys($child['options']['view_mode']['#options']) as $view_mode_id) {

        $view_id = $child['#entity']->getEntityTypeId() . '.' . $child['#entity']->bundle() . '.' . $view_mode_id;

        if (empty($view_mode_display->load($view_id))) {
          unset($child['options']['view_mode']['#options'][$view_mode_id]);
        }
      }

      // Hide the view mode selection if only one option exists.
      if (count($child['options']['view_mode']['#options']) == 1) {
        $child['options']['view_mode']['#type'] = 'hidden';
        $child['options']['view_mode']['#value'] = key($child['options']['view_mode']['#options']);
      }

      //Disabled input for CSS class(-es) on bricks for Site Owners
      $current_user = \Drupal::currentUser();
      $roles = $current_user->getRoles();
      if (in_array('site_owner', $roles)) {
        if (isset($child['options']['css_class'])) {
          //unset($child['options']['css_class']);
          $child['options']['css_class']['#type'] = 'hidden';
        }
      }
    }
  }
}

/**
 * Custom Process callback to override InlineEntityFormComplex.
 */
function mrc_bricks_helper_process($element) {
  $element['actions']['ief_edit_save']['#value'] = t('Collapse');
  return $element;
}

/**
 * Implements hook_preprocess_inline_entity_form_entity_table().
 *
 * When there is only one brick in a bricks field, the widget doesn't display
 * view mode or the classes. This function adds those to the table.
 *
 * @see bricks_inline_preprocess_inline_entity_form_entity_table().
 */
function mrc_bricks_helper_preprocess_inline_entity_form_entity_table(&$variables) {
  $element = $variables['form'];

  if (isset($element['#widget']) && $element['#widget'] == 'bricks_tree_inline') {
    // For now disable the nesting ability.
    if (!empty($variables['table']['#tabledrag'])) {
      $variables['table']['#tabledrag'] = [$variables['table']['#tabledrag'][0]];
    }

    $children = Element::children($element);
    // If there are more than 1 child, we rely on
    // bricks_inline_preprocess_inline_entity_form_entity_table() function.
    if (count($children) != 1) {
      return;
    }

    foreach ($children as $row => $key) {
      if ($key !== 'add_more') {
        $element[$key]['options']['#prefix'] = $variables['table']['#rows'][$row]['data'][0]['data'];
        $variables['table']['#rows'][$row]['data'][0]['data'] = \Drupal::service('renderer')
          ->render($element[$key]['options']);
      }
    }
  }
}
