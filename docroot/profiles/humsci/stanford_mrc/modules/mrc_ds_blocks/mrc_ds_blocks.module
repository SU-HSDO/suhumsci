<?php

/**
 * @file
 * mrc_ds_blocks.module
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Core\Entity\EntityDisplayBase;
use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\mrc_ds_blocks\Form\MrcDsBlocksFieldUi;
use Drupal\block\Entity\Block;

/**
 * Implements hook_entity_view_alter().
 */
function mrc_ds_blocks_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  /** @var \Drupal\Core\Block\BlockManager $block_manager */
  $block_manager = \Drupal::service('plugin.manager.block');
  /** @var \Drupal\mrc_ds_blocks\BlockLazyLoader $lazy_loader */
  $lazy_loader = \Drupal::service('mrc_ds_blocks.block_lazyloader');
  /** @var \Drupal\Core\Session\AccountInterface $current_user */
  $current_user = \Drupal::currentUser();

  $entity_type = $display->getTargetEntityTypeId();
  $bundle = $entity->bundle();
  $mode = $display->getMode();

  // Get all blocks for the entity with the specified view mode.
  $blocks = mrc_ds_blocks_get_blocks($entity_type, $bundle, 'view', $mode);

  foreach ($blocks as $block_id => $block) {
    // Skip the block if it has been deleted or is missing somehow.
    if (!$block_manager->hasDefinition($block_id)) {
      continue;
    }

    // Create the block and add it to the the entity.
    /** @var \Drupal\menu_block\Plugin\Block\MenuBlock $block_instance */
    $block_instance = $block_manager->createInstance($block_id, $block->config);

    // Check for correct permissions
    if (!$block_instance->access($current_user)) {
      continue;
    }

    // Create a temporary block that doesn't get saved to the db or config.
    $values = [
      'id' => bin2hex("$block_id.$entity_type.$bundle.$mode"),
      'settings' => $block->config,
      'plugin' => $block_id,
    ];
    $block = Block::create($values);
    $build[$block_id] = $lazy_loader->buildBlock($block);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alot of this was taken from field_group_field_ui_display_form_alter().
 */
function mrc_ds_blocks_form_entity_view_display_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Only start altering the form if we need to.
  if (empty($form['#fields']) && empty($form['#extra'])) {
    return;
  }

  \Drupal::classResolver()
    ->getInstanceFromDefinition(MrcDsBlocksFieldUi::class)
    ->alterForm($form, $form_state);

  // Put our submit handler first.
  array_unshift($form['actions']['submit']['#submit'], 'mrc_ds_blocks_form_submit');
}

/**
 * Submit handler for entity_view_display form to save blocks.
 *
 * @param array $form
 *   Existing form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Current state of the form.
 */
function mrc_ds_blocks_form_submit(array &$form, FormStateInterface $form_state) {
  $form_values = $form_state->getValue('fields');

  /** @var \Drupal\Core\Entity\EntityDisplayBase $display */
  $display = $form['#context'];

  $entity_type = $display->get('targetEntityType');
  $bundle = $display->get('bundle');
  $mode = $display->get('mode');
  $context = mrc_ds_blocks_get_context_from_display($display);

  // Update existing blocks.
  $blocks = mrc_ds_blocks_get_blocks($entity_type, $bundle, $context, $mode);

  foreach ($form['#mrc_ds_blocks'] as $block_id) {

    // Only save updated blocks.
    if (!isset($blocks[$block_id]) || !\Drupal::service('plugin.manager.block')
        ->hasDefinition($block_id)) {
      continue;
    }

    $block = $blocks[$block_id];
    $block->parent_name = $form_values[$block_id]['parent'];
    $block->weight = $form_values[$block_id]['weight'];
    $block->region = $form_values[$block_id]['region'];

    /** @var \Drupal\Core\Entity\EntityFormInterface $entity_form */
    $entity_form = $form_state->getFormObject();

    /** @var \Drupal\Core\Entity\Display\EntityDisplayInterface $display */
    $display = $entity_form->getEntity();

    $block->blockId = $block_id;
    mrc_ds_blocks_save($block, $display);
  }
}


/**
 * Saves a block configuration.
 *
 * @param \stdClass $block
 *   A block definition.
 * @param \Drupal\Core\Entity\Display\EntityDisplayInterface $display
 *   The display to update if known.
 *
 * @return \stdClass|NULL
 *   The updated block configuration.
 */
function mrc_ds_blocks_save($block, $display = NULL) {
  $block_manager = \Drupal::service('plugin.manager.block');
  if ($display === NULL) {
    $display = EntityViewDisplay::load($block->entity_type . '.' . $block->bundle . '.' . $block->mode);
  }

  // If no display was found. It doesn't exist yet, create it.
  if (!isset($display)) {
    $display = EntityViewDisplay::create([
      'targetEntityType' => $block->entity_type,
      'bundle' => $block->bundle,
      'mode' => $block->mode,
    ])->setStatus(TRUE);
  }

  if (isset($display)) {
    $data = (array) $block;
    $block_id = $data['blockId'];
    unset($data['blockId'], $data['entity_type'], $data['bundle'], $data['mode'], $data['form'], $data['context']);

    // Merge old data if there is any.
    $old_data = $display->getThirdPartySetting('mrc_ds_blocks', $block->blockId, $data);
    $data += $old_data;

    $display->setThirdPartySetting('mrc_ds_blocks', $block_id, $data);

    foreach (array_keys($display->getThirdPartySettings('mrc_ds_blocks')) as $block_id) {
      if (!$block_manager->hasDefinition($block_id)) {
        $display->unsetThirdPartySetting('mrc_ds_block', $block_id);
      }
    }

    $display->save();
  }

  foreach ($data as $key => $value) {
    $block->{$key} = $value;
  }

  return $block;
}

/**
 * Helper function to get the form parameters to use while
 * building the fields and display overview form.
 *
 * @param $form
 *
 * @param \Drupal\Core\Entity\EntityDisplayBase $display
 *
 * @return \stdClass
 */
function mrc_ds_blocks_field_ui_form_params($form, EntityDisplayBase $display) {

  $params = new stdClass();
  $params->entity_type = $display->getTargetEntityTypeId();
  $params->bundle = $display->getTargetBundle();
  $params->region_callback = [MrcDsBlocksFieldUi::class, 'getRowRegion'];

  $params->mode = $display->getMode();
  $params->context = mrc_ds_blocks_get_context_from_display($display);

  $params->blocks = [];
  $params->blocks = mrc_ds_blocks_get_blocks($params->entity_type, $params->bundle, $params->context, $params->mode);

  // Gather parenting data.
  $params->parents = [];
  return $params;
}

/**
 * Loads a block config.
 *
 * @param $block_id
 *   The block key.
 * @param $entity_type
 *   The name of the entity.
 * @param $bundle
 *   The name of the bundle.
 * @param $context
 *   The context of the view mode (form or view)
 * @param $mode
 *   The view mode to load.
 *
 * @return null|object
 */
function mrc_ds_blocks_load_block($block_id, $entity_type, $bundle, $context, $mode) {
  $blocks = mrc_ds_blocks_get_blocks($entity_type, $bundle, $context, $mode);
  if (isset($blocks[$block_id])) {
    return $blocks[$block_id];
  }
  return NULL;
}

/**
 * Helper function to get context from entity display.
 *
 * @param \Drupal\Core\Entity\EntityDisplayBase $display
 *
 * @return string
 */
function mrc_ds_blocks_get_context_from_display(EntityDisplayBase $display) {
  if ($display instanceof EntityFormDisplayInterface) {
    return 'form';
  }
  elseif ($display instanceof EntityViewDisplayInterface) {
    return 'view';
  }

  throw new LogicException('Unknown display object.');
}

/**
 * Get all blocks on a specific display.
 *
 * @param $entity_type
 *   The name of the entity.
 * @param $bundle
 *   The name of the bundle.
 * @param $context
 *   The context of the view mode (form or view)
 * @param $mode
 *   The view mode.
 *
 * @return array
 *   Array of blocks.
 */
function mrc_ds_blocks_get_blocks($entity_type, $bundle, $context, $mode) {
  // We only care about view modes.
  if ($context != 'view') {
    return [];
  }

  $display = EntityViewDisplay::load($entity_type . '.' . $bundle . '.' . $mode);
  if (!$display) {
    return [];
  }
  $data = $display->getThirdPartySettings('mrc_ds_blocks');


  $blocks = [];
  if (isset($data) && is_array($data)) {
    foreach ($data as $block_id => $definition) {
      $definition += [
        'entity_type' => $entity_type,
        'bundle' => $bundle,
        'context' => $context,
        'mode' => $mode,
      ];
      $blocks[$block_id] = (object) $definition;
    }
  }
  return $blocks;
}

/**
 * Deletes a block configuration from a view mode.
 *
 * @param \stdClass $block
 *   The block to remove.
 */
function mrc_ds_blocks_delete_block($block) {
  $display = EntityViewDisplay::load($block->entity_type . '.' . $block->bundle . '.' . $block->mode);

  /**
   * @var $display \Drupal\Core\Entity\Display\EntityDisplayInterface
   */
  if (isset($display)) {
    $display->unsetThirdPartySetting('mrc_ds_blocks', $block->blockId);
    $display->save();
  }
}
