<?php

/**
 * mrc_events_importer.module
 */

use Drupal\Component\Utility\Unicode;
use Drupal\migrate\Exception\RequirementsException;
use Drupal\migrate\Plugin\RequirementsInterface;
use Drupal\migrate\Plugin\MigrationInterface;
use Drupal\migrate_tools\MigrateExecutable;
use Drupal\migrate\MigrateMessage;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_entity_delete().
 */
function mrc_events_importer_entity_delete(EntityInterface $entity) {
  $database = \Drupal::database();
  /** @var \Drupal\migrate\Plugin\MigrationPluginManager $manager */
  $manager = \Drupal::service('plugin.manager.migration');
  $migrations = $manager->createInstances([]);

  /** @var \Drupal\migrate_plus\Entity\Migration $migration */
  foreach ($migrations as $migration) {
    $destination = $migration->get('destination');

    if (isset($destination['plugin']) && strpos($destination['plugin'], 'entity:') !== FALSE) {
      list(, $type) = explode(':', $destination['plugin']);

      if ($type == $entity->getEntityTypeId()) {
        $table = 'migrate_map_' . $migration->id();

        if ($database->schema()->tableExists($table)) {
          $database->delete($table)
            ->condition('destid1', $entity->id())
            ->execute();
        }
        return;
      }
    }
  }
}

/**
 * Implements hook_cron().
 */
function mrc_events_importer_cron() {
  $migrations = mrc_events_importer_migration_list();
  // Take it one group at a time, importing the migrations within each group.
  foreach ($migrations as $group_id => $migration_list) {
    array_walk($migration_list, 'mrc_events_importer_execute_migration');
  }
}


/**
 * Retrieve a list of active migrations.
 *
 * @param string $migration_ids
 *  Comma-separated list of migrations - if present, return only these
 *   migrations.
 *
 * @return MigrationInterface[][]
 *   An array keyed by migration group, each value containing an array of
 *   migrations or an empty array if no migrations match the input criteria.
 */
function mrc_events_importer_migration_list($migration_ids = '') {
  // Filter keys must match the migration configuration property name.
  $filter['migration_group'] = ['mrc_events'];
  $filter['migration_tags'] = [];

  $manager = \Drupal::service('plugin.manager.migration');
  $matched_migrations = $manager->createInstances([]);

  // Do not return any migrations which fail to meet requirements.
  /** @var \Drupal\migrate\Plugin\Migration $migration */
  foreach ($matched_migrations as $id => $migration) {
    if ($migration->getSourcePlugin() instanceof RequirementsInterface) {
      try {
        $migration->getSourcePlugin()->checkRequirements();
      }
      catch (RequirementsException $e) {
        unset($matched_migrations[$id]);
      }
    }
  }

  // Filters the matched migrations if a group or a tag has been input.
  if (!empty($filter['migration_group']) || !empty($filter['migration_tags'])) {
    // Get migrations in any of the specified groups and with any of the
    // specified tags.
    foreach ($filter as $property => $values) {
      if (!empty($values)) {
        $filtered_migrations = [];
        foreach ($values as $search_value) {
          foreach ($matched_migrations as $id => $migration) {
            // Cast to array because migration_tags can be an array.
            $configured_values = (array) $migration->get($property);
            $configured_id = (in_array($search_value, $configured_values)) ? $search_value : 'default';
            if (empty($search_value) || $search_value == $configured_id) {
              if (empty($migration_ids) || in_array(Unicode::strtolower($id), $migration_ids)) {
                $filtered_migrations[$id] = $migration;
              }
            }
          }
        }
        $matched_migrations = $filtered_migrations;
      }
    }
  }

  // Sort the matched migrations by group.
  if (!empty($matched_migrations)) {
    foreach ($matched_migrations as $id => $migration) {
      $configured_group_id = empty($migration->get('migration_group')) ? 'default' : $migration->get('migration_group');
      $migrations[$configured_group_id][$id] = $migration;
    }
  }
  return isset($migrations) ? $migrations : [];
}

/**
 * Executes a single migration. If the --execute-dependencies option was given,
 * the migration's dependencies will also be executed first.
 *
 * @param \Drupal\migrate\Plugin\MigrationInterface $migration
 *  The migration to execute.
 * @param string $migration_id
 *  The migration ID (not used, just an artifact of array_walk()).
 */
function mrc_events_importer_execute_migration(MigrationInterface $migration, $migration_id) {
  $log = new MigrateMessage();
  //  $migration->getIdMap()->prepareUpdate();
  $executable = new MigrateExecutable($migration, $log);
  $executable->import();
}
