<?php

/**
 * @file
 * Preprocess functions for MRC.
 */

use Drupal\ui_patterns\UiPatterns;
use Drupal\Component\Utility\Html;
use Drupal\views\Plugin\views\field\EntityField;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\Entity\Node;

/**
 * Implements hook_preprocess_html().
 */
function math_research_center_preprocess_html(&$variables) {
  $xuacompatible = [
    '#tag' => 'meta',
    '#attributes' => [
      'http-equiv' => 'X-UA-Compatible',
      'content' => 'IE=edge',
    ],
  ];

  $variables['page']['#attached']['html_head'][] = [
    $xuacompatible,
    'X-UA-Compatible',
  ];
}

/**
 * Implements hook_preprocess_pattern_view_field().
 */
function math_research_center_preprocess_pattern_view_field(&$variables) {
  $field = $variables['field'];
  if ($field->handler instanceof EntityField) {
    $items = $field->handler->getItems($variables['row']);

    // Make labels plural if they are generic.
    if ($field->label) {
      $replacement = count($items) > 1 ? 's' : '';
      $field->label = str_replace('(s)', $replacement, $field->label);
    }
  }

}

/**
 * Implements hook_preprocess_block().
 */
function math_research_center_preprocess_block(&$variables) {
  if ($variables['elements']['#base_plugin_id'] == 'menu_block') {
    // Get the current active trail.
    /** @var \Drupal\Core\Menu\MenuActiveTrail $active_trail */
    $active_trail = \Drupal::service('menu.active_trail');
    $trail = $active_trail->getActiveTrailIds($variables['elements']['#derivative_plugin_id']);
    $trail = array_filter($trail);

    if (empty($trail)) {
      return;
    }

    // The last item of the trail is the root menu item.
    $root = end($trail);

    /** @var \Drupal\Core\Menu\MenuLinkManager $menu_link_manager */
    $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
    // Create the link to put as the label
    if ($root_link = $menu_link_manager->createInstance($root)) {
      $link = \Drupal\Core\Link::fromTextAndUrl($variables['configuration']['label'], $root_link->getUrlObject());
      $variables['configuration']['label'] = $link->toRenderable();

      if (count($trail) == 1) {
        $variables['configuration']['label']['#attributes']['class'][] = 'is-active';
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function math_research_center_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if ($hook == 'block' && $variables['elements']['#base_plugin_id'] == 'menu_block') {
    $suggestions[] = 'block__menu_block';
  }
  if ($hook == 'menu' && isset($variables['menu_block_configuration'])) {
    $suggestions[] = 'menu__menu_block';
    $suggestions[] = 'menu__menu_block__' . $variables['menu_name'];
  }
}

/**
 * Implements hook_preprocess_page().
 */
function math_research_center_preprocess_page(&$variables) {
  if (isset($variables['node'])) {
    $node = $variables['node'];
    if (!$variables['node'] instanceof EntityInterface) {
      $node = Node::load((is_int($node) || is_string($node)) ? $node : 0);
    }

    if ($node) {
      $variables['#attached']['library'][] = 'math_research_center/node.' . $node->bundle();
    }
  }
  if ($variables['is_front']) {
    $variables['#attached']['library'][] = 'math_research_center/front';
  }
}

/**
 * Implements hook_preprocess_patterns_overview_page().
 */
function math_research_center_preprocess_patterns_overview_page(&$variables) {
  uasort($variables['patterns'], function ($pattern_a, $pattern_b) {
    return strcmp($pattern_a['label'], $pattern_b['label']);
  });
}

/**
 * Implements hook_preprocess_item_list__search_results().
 */
function math_research_center_preprocess_item_list__search_results(&$variables) {
  // Set the start of the ol numbers.
  if ($page = (int) \Drupal::requestStack()
    ->getCurrentRequest()->query->get('page')) {
    $variables['attributes']['start'] = $page * 10 + 1;
  }
}

/**
 * Implements hook_preprocess().
 */
function math_research_center_preprocess(&$variables, $hook) {
  // UI Patterns don't have a general hook_preprocess_pattern() so we check
  // here first and then find the correct pattern next.
  if (strpos($hook, 'pattern') !== FALSE) {
    math_research_center_preprocess_pattern($variables, $hook);
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function math_research_center_preprocess_paragraph(&$variables) {
  $variables['#attached']['library'][] = 'math_research_center/paragraph.' . $variables['paragraph']->bundle();
}

/**
 * Implements hook_preprocess_views_view().
 */
function math_research_center_preprocess_views_view(&$vars) {
  if (!empty($vars['more'])) {
    // Add class to read more link in views.
    $vars['more']['#options']['attributes']['class'][] = 'decanter-button';
  }
}

/**
 * Helper function to preprocess all patterns.
 */
function math_research_center_preprocess_pattern(&$variables, $hook) {
  foreach (UiPatterns::getManager()->getPatterns() as $pattern) {
    if ($hook == 'pattern_' . $pattern->getPluginId()) {
      /** @var \Drupal\ui_patterns\Definition\PatternDefinition $pattern_definition */
      $pattern_definition = $pattern->getPluginDefinition();

      // Cleanup any fields in the pattern that have no text. This happens
      // mostly in views.
      foreach (array_keys($pattern_definition->getFields()) as $field) {
        if (empty($variables[$field]) || empty(trim(preg_replace('/<!--(.*)-->/Uis', '', render($variables[$field]))))) {
          unset($variables[$field]);
        }
      }

      if (!isset($variables['attributes']['id'])) {
        $variables['attributes']['id'] = Html::getUniqueId($hook);
      }

      if (!isset($variables['attributes']['class'])) {
        $variables['attributes']['class'] = [];
      }
      $variables['attributes']['class'][] = 'ui-pattern';
      $variables['attributes']['class'][] = Html::cleanCssIdentifier($hook);

      // We got the pattern we want, so we can exit.
      return;
    }
  }
}

/**
 * Implements hook_preprocess_field().
 */
function math_research_center_preprocess_field(&$variables) {
  // Make labels plural if they are generic.
  if ($variables['label']) {
    $replacement = count($variables['items']) > 1 ? 's' : '';
    $variables['label'] = str_replace('(s)', $replacement, $variables['label']);
  }

  // Change some field settings like the labels.
  switch ($variables['field_name']) {
    case 'field_s_visitor_donor':
      $variables['label'] = t('Position funded by');
      break;

    case 'field_s_visitor_external_link':
      $node_title = $variables['element']['#object']->label();
      $variables['label'] = t('You can learn more about @title at', ['@title' => $node_title]);
      break;

    case 'field_s_news_byline':
      $variables['label'] = t('Story by');
      break;

  }

}

/**
 * Implements hook_preprocess_search_result().
 */
function math_research_center_preprocess_search_result(&$variables) {
  // Hide user and date/time info.
  unset($variables['info']);
}
