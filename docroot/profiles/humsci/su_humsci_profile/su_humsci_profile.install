<?php

/**
 * @file
 * su_humsci_profile.install
 */

use Drupal\user\Entity\User;
use Drupal\user\RoleInterface;
use Drupal\shortcut\Entity\Shortcut;
use Drupal\Core\Config\FileStorage;
use Drupal\user\Entity\Role;
use Drupal\layout_builder\Plugin\SectionStorage\OverridesSectionStorage;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\layout_builder\Entity\LayoutBuilderEntityViewDisplay;
use Drupal\node\Entity\Node;
use Drupal\block\Entity\Block;

/**
 * Implements hook_install().
 */
function su_humsci_profile_install() {
  // Assign user 1 the "administrator" role.
  $user = User::load(1);
  $user->name = 'sws-developers';
  $user->roles[] = 'administrator';
  $user->save();

  // We install some menu links, so we have to rebuild the router, to ensure the
  // menu links are valid.
  \Drupal::service('router.builder')->rebuildIfNeeded();

  // Allow authenticated users to use shortcuts.
  user_role_grant_permissions(RoleInterface::AUTHENTICATED_ID, ['access shortcuts']);

  // Allow all users to use search.
  user_role_grant_permissions(RoleInterface::ANONYMOUS_ID, ['search content']);
  user_role_grant_permissions(RoleInterface::AUTHENTICATED_ID, ['search content']);

  _su_humsci_profile_create_default_content();
}

/**
 * Create default content during install.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function _su_humsci_profile_create_default_content() {
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  if (!empty($node_storage->loadMultiple())) {
    \Drupal::logger('su_humsci_profile')
      ->info(t('Content has already been imported.'));
    return;
  }

  /** @var \Drupal\default_content\Importer $content_importer */
  $content_importer = \Drupal::service('default_content.importer');

  try {
    $content_importer->importContent('su_humsci_profile');
    node_access_rebuild();
  }
  catch (Exception $e) {
    \Drupal::logger('su_humsci_profile')
      ->error('Failed to import default content: @message', ['@message' => $e->getMessage()]);
    return;
  }
}

/**
 * Enables config readonly module after profile finishes.
 */
function su_humsci_profile_lock_config(&$install_state) {
  install_finished($install_state);
  \Drupal::service('module_installer')->install(['hs_config_readonly']);
}

/**
 * Create config split entities.
 */
function su_humsci_profile_update_8002() {
  \Drupal::service('module_installer')->install([
    'config_split',
    'config_ignore',
  ]);

  // Install all the default configs first which includes environment specific
  // config splits.
  $source = new FileStorage('../config/default');
  /** @var \Drupal\Core\Config\CachedStorage $config_storage */
  $config_storage = \Drupal::service('config.storage');
  foreach ($source->listAll() as $name) {
    if (strpos($name, 'config_split') !== FALSE || strpos($name, 'config_ignore') !== FALSE) {
      $config_storage->write($name, $source->read($name));
    }
  }

  // Install the config splits from the individual site config directory.
  $file_dir = \Drupal::service('file_system')
    ->realpath(file_default_scheme() . "://");
  $site_path = str_replace('/files', '', $file_dir);
  $site_dir = substr($site_path, strrpos($site_path, '/') + 1);

  if (is_dir("../config/$site_dir")) {
    $source = new FileStorage("../config/$site_dir");
    /** @var \Drupal\Core\Config\CachedStorage $config_storage */
    $config_storage = \Drupal::service('config.storage');
    foreach ($source->listAll() as $name) {
      if (strpos($name, 'config_split') !== FALSE) {
        $config_storage->write($name, $source->read($name));
      }
    }
  }
}

/**
 * Uninstalls search module.
 */
function su_humsci_profile_update_8003() {
  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
  $module_installer = \Drupal::service('module_installer');
  $module_installer->uninstall(['search']);
}

/**
 * Invalidate sample content.
 */
function su_humsci_profile_update_8004() {
  \Drupal::database()
    ->update('key_value_expire')
    ->fields(['expire' => 0])
    ->condition('collection', 'tempstore.shared.layout_builder.sample_entity')
    ->execute();
}

/**
 * Create CI Config Split settings.
 */
function su_humsci_profile_update_8005() {
  $source = new FileStorage('../config/default');
  /** @var \Drupal\Core\Config\CachedStorage $config_storage */
  $config_storage = \Drupal::service('config.storage');
  $config_storage->write('config_split.config_split.ci', $source->read('config_split.config_split.ci'));
}

/**
 * Update config ignore settings.
 */
function su_humsci_profile_update_8006() {
  $config = \Drupal::configFactory()->getEditable('config_ignore.settings');
  if ($ignored_entities = $config->get('ignored_config_entities')) {
    $ignored_entities[] = 'user.role.*:permissions';
    $config->set('ignored_config_entities', $ignored_entities);
    $config->save();
  }
}

/**
 * Give site managers permission to view user list.
 */
function su_humsci_profile_update_8007() {
  $site_manager = Role::load('site_manager');
  $site_manager->grantPermission('view user list');
  $site_manager->save();
}

/**
 * Add view status to config ignore.
 */
function su_humsci_profile_update_8008() {
  $config = \Drupal::configFactory()->getEditable('config_ignore.settings');
  if ($ignored_entities = $config->get('ignored_config_entities')) {
    $ignored_entities[] = 'views.view.hs_*:status';
    $config->set('ignored_config_entities', $ignored_entities);
    $config->save();
  }
}

/**
 * Reset config ignore settings.
 */
function su_humsci_profile_update_8009() {
  $source = new FileStorage('../config/default');
  /** @var \Drupal\Core\Config\CachedStorage $config_storage */
  $config_storage = \Drupal::service('config.storage');
  $name = 'config_ignore.settings';
  $config_storage->write($name, $source->read($name));
}

/**
 * Fix menu block configurations.
 */
function su_humsci_profile_update_8010() {
  // Fix content type display modes.
  /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display */
  foreach (EntityViewDisplay::loadMultiple() as $display) {
    if ($display instanceof LayoutBuilderEntityViewDisplay && $display->isLayoutBuilderEnabled()) {

      if (_su_humsci_profile_update_fix_menuposition_sections($display->getSections())) {
        $display->save();
      }
    }
  }

  // Fix node overrides that might exist.
  $nids = \Drupal::entityQuery('node')
    ->condition(OverridesSectionStorage::FIELD_NAME, '', '<>')
    ->execute();

  /** @var \Drupal\node\NodeInterface $node */
  foreach (Node::loadMultiple($nids) as $node) {
    /** @var \Drupal\layout_builder\Field\LayoutSectionItemList $section_list */
    $section_list = $node->get(OverridesSectionStorage::FIELD_NAME);

    if (_su_humsci_profile_update_fix_menuposition_sections($section_list->getSections())) {
      $node->save();
    }
  }
}

/**
 * Fix menu block configurations for nodes.
 *
 * This function has an underscore at the beginning to prevent it from running
 * until we decide it necessary.
 */
function _su_humsci_profile_update_8011() {
  // Fix node overrides that might exist.
  $nids = \Drupal::entityQuery('node')
    ->condition(OverridesSectionStorage::FIELD_NAME, '', '<>')
    ->execute();

  /** @var \Drupal\node\NodeInterface $node */
  foreach (Node::loadMultiple($nids) as $node) {
    /** @var \Drupal\layout_builder\Field\LayoutSectionItemList $section_list */
    $section_list = $node->get(OverridesSectionStorage::FIELD_NAME);

    if (_su_humsci_profile_update_fix_menuposition_sections($section_list->getSections())) {
      $node->save();
    }
  }
}

/**
 * Loop through layout builder sections and fix menu block configurations.
 *
 * @param \Drupal\layout_builder\Section[] $sections
 *   Array of sections.
 *
 * @return bool
 *   If anything was changed in the any component.
 */
function _su_humsci_profile_update_fix_menuposition_sections(array $sections) {
  $changed = FALSE;
  foreach ($sections as $section) {
    foreach ($section->getComponents() as $component) {

      try {
        $plugin_id = $component->getPluginId();
      }
      catch (Exception $e) {

        \Drupal::logger('humsci_profile')
          ->error('Error during update for component @uuid: @message', [
            '@uuid' => $component->getUuid(),
            '@message' => $e->getMessage(),
          ]);
        continue;
      }
      if ($plugin_id == 'menu_block:main') {
        $config = $component->get('configuration');
        $config['follow'] = 0;
        $config['follow_parent'] = 'active';
        $config['level'] = 2;
        $config['expand'] = TRUE;
        $component->setConfiguration($config);
        $changed = TRUE;
      }
    }
  }
  return $changed;
}

/**
 * Uninstall material admin theme and theme switcher module.
 */
function su_humsci_profile_update_8012() {
  drupal_flush_all_caches();

  $config_factory = \Drupal::configFactory();

  // Get all the humsci admin theme block names.
  $query = \Drupal::database()
    ->select('config', 'c')
    ->fields('c', ['name'])
    ->condition('name', 'block.block.su_humsci_admin%', 'LIKE')
    ->execute();

  // The status region no longer exists, so move any blocks into the help
  // region.
  while ($config_name = $query->fetchField()) {
    $config = $config_factory->getEditable($config_name);
    if ($config->get('region') == 'status') {
      $config->set('region', 'help')->save();
    }
  }

  // Disable theme switcher module since we no longer need it.
  \Drupal::service('module_installer')->uninstall(['role_theme_switcher']);
  \Drupal::service('theme_installer')->uninstall(['material_admin']);

  // Remove the role that is no longer necessary.
  if ($role = Role::load('seven_admin_theme_user')) {
    $role->delete();
  }

  $block = Block::load('su_humsci_admin_breadcrumbs');
  $visibility = [
    'id' => 'request_path',
    'pages' => '/user/login',
    'negate' => TRUE,
    'context_mapping' => [],
  ];
  $block->setVisibilityConfig('request_path', $visibility);
  $block->save();
}

/**
 * Add permission to view manage toolbar button for site managers roles.
 */
function su_humsci_profile_update_8014() {
  Role::load('site_manager')->grantPermission('view toolbar manage')->save();
  Role::load('contributor')->grantPermission('view toolbar manage')->save();
}

/**
 * Enables View unpublished module and sets permission for site managers.
 */
function su_humsci_profile_update_8015(){
  \Drupal::service('module_installer')->install(['view_unpublished']);
  Role::load('site_manager')->grantPermission('view any unpublished content')->save();
  node_access_rebuild();
}
