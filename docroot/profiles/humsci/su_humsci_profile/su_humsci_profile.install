<?php

/**
 * @file
 * su_humsci_profile.install
 */

use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\eck\Entity\EckEntityBundle;
use Drupal\eck\Entity\EckEntityType;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\hs_entities\Entity\HsEntityType;
use Drupal\user\RoleInterface;

/**
 * Implements hook_install_tasks().
 */
function su_humsci_profile_install_tasks(&$install_state) {
  return ['su_humsci_profile_final_task' => []];
}

/**
 * Final profile installation task.
 */
function su_humsci_profile_final_task() {
  \Drupal::service('su_humsci_profile.post_install')->runTasks();
}

/**
 * Implements hook_update_last_removed().
 */
function su_humsci_profile_update_last_removed() {
  return 9604;
}

/**
 * Create new entities to migrate ECKs.
 */
function su_humsci_profile_update_9700() {
  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager */
  $entity_field_manager = \Drupal::service('entity_field.manager');
  $field_map = $entity_field_manager->getFieldMap();

  // Go through each of the ECK types and bundles and create new HS Entity
  // bundles with the matching fields, form and display settings from the ECK.
  foreach (_su_humsci_profile_update_eck_info() as $eck_name => $bundles) {
    $eck_type = \Drupal::config("eck.eck_entity_type.$eck_name");
    foreach ($bundles as $bundle_id => $new_bundle_id) {
      $eck_bundle = \Drupal::config("eck.eck_type.$eck_name.$bundle_id");

      $eck_form = EntityFormDisplay::load("$eck_name.$bundle_id.default");
      $eck_display = EntityViewDisplay::load("$eck_name.$bundle_id.default");

      // Create the new hs entity type to migrate the entities.
      HsEntityType::create([
        'uuid' => _su_humsci_profile_get_uuid("hs_entities.hs_entity_type.$new_bundle_id"),
        'id' => $new_bundle_id,
        'label' => $eck_type->get('label') . ': ' . $eck_bundle->get('name'),
      ])->save();

      // Create the new form display.
      $hs_entity_form = EntityFormDisplay::create([
        'uuid' => _su_humsci_profile_get_uuid("core.entity_form_display.hs_entity.$new_bundle_id.default"),
        'id' => "hs_entity.$new_bundle_id.default",
        'status' => TRUE,
        'targetEntityType' => 'hs_entity',
        'bundle' => $new_bundle_id,
        'mode' => 'default',
      ]);
      $hs_entity_form->removeComponent('created');
      $hs_entity_form->removeComponent('uid');

      // Create the new view display.
      $hs_entity_display = EntityViewDisplay::create([
        'uuid' => _su_humsci_profile_get_uuid("core.entity_view_display.hs_entity.$new_bundle_id.default"),
        'id' => "hs_entity.$new_bundle_id.default",
        'status' => TRUE,
        'targetEntityType' => 'hs_entity',
        'bundle' => $new_bundle_id,
        'mode' => 'default',
      ]);
      $hs_entity_display->removeComponent('created');
      $hs_entity_display->removeComponent('uid');

      // Create new fields on the new entity types.
      foreach ($field_map[$eck_name] as $field_name => $field_info) {
        if (in_array($bundle_id, $field_info['bundles'])) {
          /** @var \Drupal\field\FieldStorageConfigInterface|null $storage */
          $storage = FieldStorageConfig::loadByName($eck_name, $field_name);
          /** @var \Drupal\Core\Field\FieldConfigInterface|null $config */
          $config = FieldConfig::loadByName($eck_name, $bundle_id, $field_name);

          // Base fields don't have storage of field configs.
          if (!$storage || !$config) {
            continue;
          }

          // Create the new field storage on the hs entity to match the ECK.
          if (!FieldStorageConfig::loadByName('hs_entity_type', $field_name)) {
            FieldStorageConfig::create([
              'uuid' => _su_humsci_profile_get_uuid("field.storage.hs_entity.$field_name"),
              'type' => $storage->getType(),
              'field_name' => $field_name,
              'entity_type' => 'hs_entity',
              'settings' => $storage->getSettings(),
              'cardinality' => $storage->getCardinality(),
            ])->save();
          }

          // Create the new field config on the hs entity to match the ECK.
          if (!FieldConfig::loadByName('hs_entity_type', $new_bundle_id, $field_name)) {
            FieldConfig::create([
              'uuid' => _su_humsci_profile_get_uuid("field.field.hs_entity.$new_bundle_id.$field_name"),
              'field_type' => $config->getType(),
              'entity_type' => 'hs_entity',
              'bundle' => $new_bundle_id,
              'field_name' => $field_name,
              'label' => $config->label(),
              'settings' => $config->getSettings(),
            ])->save();

            // Copy the form and display settings for the field.
            if ($form_settings = $eck_form->getComponent($field_name)) {
              $hs_entity_form->setComponent($field_name, $form_settings);
            }

            if ($display_settings = $eck_display->getComponent($field_name)) {
              $hs_entity_display->setComponent($field_name, $display_settings);
            }
          }
        }
      }

      // Copy the third party settings to capture DS or field group settings.
      $hs_entity_form->set('third_party_settings', $eck_form->get('third_party_settings'));
      $hs_entity_display->set('third_party_settings', $eck_display->get('third_party_settings'));

      $hs_entity_form->save();
      $hs_entity_display->save();
    }
  }
}

/**
 * Migrate ECKs to the new types.
 */
function su_humsci_profile_update_9701(&$sandbox) {
  $entity_type_manager = \Drupal::entityTypeManager();
  $eck_info = _su_humsci_profile_update_eck_info();
  if (!isset($sandbox['count'])) {
    $sandbox['items'] = [];
    $sandbox['convert'] = [];

    // Store all the ECK ids into the sandbox for batch processing.
    foreach ($eck_info as $eck_name => $bundles) {
      $ids = $entity_type_manager->getStorage($eck_name)
        ->getQuery()
        ->accessCheck(FALSE)
        ->execute();
      foreach ($ids as $id) {
        $sandbox['items'][] = "$eck_name:$id";
      }
    }
    $sandbox['items'] = array_filter($sandbox['items']);
    $sandbox['count'] = count($sandbox['items']);
  }

  $batched_items = array_splice($sandbox['items'], 0, 100);

  foreach ($batched_items as $item) {
    [$eck_type, $id] = explode(':', $item);
    $entity = $entity_type_manager->getStorage($eck_type)->load($id);

    $new_bundle_id = $eck_info[$eck_type][$entity->bundle()];
    /** @var \Drupal\hs_entities\HsEntityInterface $new_entity */
    $new_entity = \Drupal::entityTypeManager()
      ->getStorage('hs_entity')
      ->create([
        'label' => $entity->label(),
        'bundle' => $new_bundle_id,
      ]);

    // Make sure not to copy the id or uuid fields from the ECK.
    $skip_fields = ['id', 'uuid'];
    // Copy any fields that exist on both entity types.
    foreach (array_keys($entity->getFieldDefinitions()) as $field_name) {
      if ($new_entity->hasField($field_name) && !in_array($field_name, $skip_fields)) {
        $new_entity->set($field_name, $entity->get($field_name)->getValue());
      }
    }
    $new_entity->save();
    $sandbox['convert'][$eck_type][$id] = $new_entity->id();
    $entity->delete();
  }
  $sandbox['#finished'] = empty($sandbox['items']) ? 1 : ($sandbox['count'] - count($sandbox['items'])) / $sandbox['count'];

  // When the conversion is complete, update all the field data.
  if (!empty($sandbox['items'])) {
    return;
  }

  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager */
  $entity_field_manager = \Drupal::service('entity_field.manager');
  $field_map = $entity_field_manager->getFieldMapByFieldType('entity_reference');
  $update_fields = [];

  // Find all the fields that reference each of the ECK entity types.
  foreach ($field_map as $entity_type => $fields) {
    foreach ($fields as $field_name => $field_info) {
      $field_storage = FieldStorageConfig::loadByName($entity_type, $field_name);
      if (!$field_storage) {
        continue;
      }
      $target_type = $field_storage->getSetting('target_type');
      if (isset($eck_info[$target_type])) {
        $update_fields[$entity_type][$field_name] = $target_type;
      }
    }
  }

  // Update the database for the new hs entity ids.
  foreach ($update_fields as $entity_type => $update_entity_fields) {
    foreach ($update_entity_fields as $field_name => $eck_type) {
      $convert_ids = $sandbox['convert'][$eck_type] ?? [];

      $query = \Drupal::database()
        ->select("{$entity_type}__$field_name", 'f')
        ->fields('f', ['entity_id', 'delta', "{$field_name}_target_id"])
        ->execute();

      while ($entry = $query->fetchAssoc()) {
        \Drupal::database()->update("{$entity_type}__$field_name")
          ->fields(["{$field_name}_target_id" => $convert_ids[$entry["{$field_name}_target_id"]]])
          ->condition('entity_id', $entry['entity_id'])
          ->condition('delta', $entry['delta'])
          ->execute();

        $revision_table = \Drupal::database()
          ->schema()
          ->tableExists("{$entity_type}_revision__$field_name");

        if ($revision_table) {
          \Drupal::database()->update("{$entity_type}_revision__$field_name")
            ->fields(["{$field_name}_target_id" => $convert_ids[$entry["{$field_name}_target_id"]]])
            ->condition('entity_id', $entry['entity_id'])
            ->condition('delta', $entry['delta'])
            ->execute();
        }
      }
    }
  }
}

/**
 * Update content field configs for the new entity types.
 */
function su_humsci_profile_update_9702() {
  $eck_info = _su_humsci_profile_update_eck_info();
  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $entity_field_manager */
  $entity_field_manager = \Drupal::service('entity_field.manager');
  $field_map = $entity_field_manager->getFieldMapByFieldType('entity_reference');

  // For each entity reference field, update the target entity type and bundle.
  foreach ($field_map as $entity_type => $fields) {
    foreach ($fields as $field_name => $field_info) {
      $field_storage = FieldStorageConfig::loadByName($entity_type, $field_name);
      $field_storage_config = \Drupal::configFactory()
        ->getEditable("field.storage.$entity_type.$field_name");
      foreach ($field_info['bundles'] as $field_bundle) {
        $field_config = FieldConfig::loadByName($entity_type, $field_bundle, $field_name);
        if (!$field_config) {
          continue;
        }
        $handler = $field_config->getSetting('handler');
        $handler_settings = $field_config->getSetting('handler_settings');

        $target = str_replace('default:', '', $handler);
        if (isset($eck_info[$target])) {
          $new_target_bundle = $eck_info[$target][reset($handler_settings['target_bundles'])];

          // Update the field config first.
          $settings = $field_config->getSettings();
          $settings['handler'] = 'default:hs_entity';
          $settings['target_type'] = 'hs_entity';
          $settings['handler_settings']['auto_create'] = TRUE;
          $settings['handler_settings']['target_bundles'] = [$new_target_bundle => $new_target_bundle];
          $settings['handler_settings']['sort'] = [
            'field' => 'label',
            'direction' => 'ASC',
          ];
          $field_config->set('settings', $settings);
          $field_config->save();

          // Update the field storage.
          $field_storage->setSetting('target_type', 'hs_entity');
          $field_storage->save();

          // Update the config objects to make sure we capture the new values.
          $field_storage_config->set('settings.target_type', 'hs_entity');
          $field_storage_config->save();

          $config = \Drupal::configFactory()
            ->getEditable("field.field.$entity_type.$field_bundle.$field_name");
          $config->set('settings', $settings);
          $config->save();
        }
      }
    }
  }
}

/**
 * Update views to new entity type.
 */
function su_humsci_profile_update_9703() {
  $config_factory = \Drupal::configFactory();
  $view_config_names = $config_factory->listAll('views.view.');

  foreach ($view_config_names as $config_name) {
    $config = $config_factory->getEditable($config_name);
    $raw = $config->getRawData();
    _su_humsci_profile_fix_view_data($raw);
    $config->setData($raw)->save(TRUE);
  }
}

/**
 * Recursively traverse a view data structure and change the necessary values.
 *
 * @param mixed $data
 *   Config data array or values.
 */
function _su_humsci_profile_fix_view_data(&$data) {
  $eck_info = _su_humsci_profile_update_eck_info();

  if (is_array($data)) {
    // For the fields and filters, update the ECK types to the hs_entity.
    if (
      isset($data['entity_type']) &&
      is_string($data['entity_type']) &&
      isset($eck_info[$data['entity_type']])
    ) {
      $data['entity_type'] = 'hs_entity';

      if (isset($data['table']) && is_string($data['table'])) {
        $data['table'] = 'hs_entity';
      }

      if (isset($data['field']) && is_string($data['field'])) {
        $data['field'] = 'label';
      }
      if (isset($data['entity_field']) && is_string($data['entity_field'])) {
        $data['entity_field'] = 'label';
      }
    }

    foreach ($data as &$value) {
      _su_humsci_profile_fix_view_data($value);
    }
  }
}

/**
 * Delete ECKs and their types.
 */
function su_humsci_profile_update_9704() {
  $roles = user_role_names();
  $eck_info = _su_humsci_profile_update_eck_info();
  foreach ($eck_info as $eck_type => $bundles) {
    $entities = \Drupal::entityTypeManager()
      ->getStorage($eck_type)
      ->loadMultiple();

    // Make sure no ECK entities before deleting the bundles and types.
    foreach ($entities as $entity) {
      $entity->delete();
    }

    foreach (EckEntityBundle::loadMultiple(array_keys($bundles)) as $eck_bundle) {
      $eck_bundle->delete();
    }

    foreach (array_keys($roles) as $role_id) {
      // Remove all the permissions before deleting the ECK to avoid errors.
      user_role_revoke_permissions($role_id, [
        "create $eck_type entities",
        "delete any $eck_type entities",
        "delete own $eck_type entities",
        "edit any $eck_type entities",
        "edit own $eck_type entities",
        "view any $eck_type entities",
        "view own $eck_type entities",
      ]);
    }
    EckEntityType::load($eck_type)->delete();
  }

  // Adjust all the permissions.
  user_role_grant_permissions('site_manager', [
    'create humsci entity',
    'delete humsci entity',
    'edit humsci entity',
  ]);
  user_role_grant_permissions('contributor', [
    'create humsci entity',
    'delete humsci entity',
    'edit humsci entity',
  ]);
  user_role_grant_permissions('author', [
    'create humsci entity',
    'delete humsci entity',
    'edit humsci entity',
  ]);
  user_role_grant_permissions(RoleInterface::ANONYMOUS_ID, ['view humsci entity']);
  user_role_grant_permissions(RoleInterface::AUTHENTICATED_ID, ['view humsci entity']);
}

function _su_humsci_profile_update_eck_info(): array {
  $info = &drupal_static(__FUNCTION__, []);
  if ($info) {
    return $info;
  }
  $config_factory = \Drupal::configFactory();
  $names = $config_factory->listAll('eck.eck_entity_type.');

  // Loop through each of the ECK types.
  foreach ($names as $name) {
    $eck_type = $config_factory->get($name);
    $eck_name = $eck_type->get('id');
    $bundles = $config_factory->listAll("eck.eck_type.$eck_name.");

    // Loop through each of the bundles on the ECK type.
    foreach ($bundles as $bundle) {
      $eck_bundle = $config_factory->get($bundle);
      $bundle_id = $eck_bundle->get('type');
      $new_bundle_id = substr("{$eck_name}__$bundle_id", 0, 32);

      $info[$eck_name][$bundle_id] = $new_bundle_id;
    }
  }

  return $info;
}

/**
 * Get the UUID of the config from the sync directory if it exists.
 *
 * @param string $config_name
 *   Config name.
 *
 * @return string|null
 *   UUID string.
 */
function _su_humsci_profile_get_uuid(string $config_name): string|null {
  /** @var \Drupal\Core\Config\FileStorage $config_storage */
  $config_storage = \Drupal::service('config.storage.sync');
  $config = $config_storage->read($config_name);
  return $config['uuid'] ?? NULL;
}
