<?php

/**
 * @file
 * su_humsci_profile.install
 */

use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;
use Drupal\user\UserInterface;
use Drupal\key\Entity\Key;

/**
 * Implements hook_install_tasks().
 */
function su_humsci_profile_install_tasks(&$install_state) {
  return ['su_humsci_profile_final_task' => []];
}

/**
 * Final profile installation task.
 */
function su_humsci_profile_final_task() {
  \Drupal::service('su_humsci_profile.post_install')->runTasks();
}

/**
 * Indicates version of profile.
 */
function su_humsci_profile_update_8200() {
  // Intentionally left empty.
}

/**
 * Set the permissions for the hero overlay field.
 */
function su_humsci_profile_update_8201() {
  $perms = [
    'view field_hs_hero_overlay_color',
    'view own field_hs_hero_overlay_color',
  ];
  user_role_grant_permissions(UserInterface::ANONYMOUS_ROLE, $perms);
  $perms = [
    'create field_hs_hero_overlay_color',
    'edit field_hs_hero_overlay_color',
    'edit own field_hs_hero_overlay_color',
    'view field_hs_hero_overlay_color',
    'view own field_hs_hero_overlay_color',
  ];
  user_role_grant_permissions(UserInterface::AUTHENTICATED_ROLE, $perms);
}

/**
 * Enable new themes.
 */
function su_humsci_profile_update_8202() {
  \Drupal::service('theme_installer')->install([
    'humsci_basic',
    'humsci_traditional',
    'humsci_colorful',
  ]);
  drupal_flush_all_caches();
}

/**
 * Disable preview mode on all content types.
 */
function su_humsci_profile_update_8203() {
  $node_types = \Drupal::entityTypeManager()
    ->getStorage('node_type')
    ->loadMultiple();
  $config_factory = \Drupal::configFactory();
  foreach (array_keys($node_types) as $type) {
    $config_factory->getEditable("node.type.$type")
      ->set('preview_mode', 0)
      ->save();
  }
}

/**
 * Disable hs_revision_cleanup module.
 */
function su_humsci_profile_update_8204() {
  \Drupal::service('module_installer')->uninstall(['hs_revision_cleanup']);
}

/**
 * Uninstall deprecated webform_jqueryui_buttons module.
 */
function su_humsci_profile_update_8205() {
  \Drupal::service('module_installer')->uninstall(['webform_jqueryui_buttons']);
}

/**
 * Create the default migration group.
 */
function su_humsci_profile_update_9000() {
  $storage = \Drupal::entityTypeManager()
    ->getStorage('migration_group');

  if (!$storage->load('default')) {
    $storage->create([
      'uuid' => 'd97cf71e-57ce-428b-8247-003ce7d5166d',
      'id' => 'default',
      'label' => 'Default',
    ])->save();
  }

  $config = \Drupal::configFactory()->getEditable('config_ignore.settings');
  $ignored = $config->get('ignored_config_entities');
  $ignored[] = 'hs_courses_importer.importer_settings';
  $config->set('ignored_config_entities', $ignored)->save();
}

/**
 * Update profile settings for the condition plugins settings.
 */
function su_humsci_profile_update_9001() {
  $good_plugins = [
    'node_type',
    'request_path',
    'user_role',
    'entity_bundle:node',
    'current_theme',
    'term',
  ];
  \Drupal::configFactory()
    ->getEditable('su_humsci_profile.settings')
    ->set('allowed.condition_plugins', $good_plugins)
    ->save();
}

/**
 * Uninstall Layout Paragraphs.
 */
function su_humsci_profile_update_9002() {
  \Drupal::service('module_installer')->uninstall(['layout_paragraphs']);
}

/**
 * Enable various modules.
 */
function su_humsci_profile_update_9003() {
  \Drupal::service('module_installer')->uninstall([
    'core_event_dispatcher',
    'field_event_dispatcher',
    'hook_event_dispatcher',
    'jsonapi_event_dispatcher',
    'media_event_dispatcher',
    'path_event_dispatcher',
    'preprocess_event_dispatcher',
    'toolbar_event_dispatcher',
    'user_event_dispatcher',
    'views_event_dispatcher',
    'humsci_events_listeners',
  ]);
}

/**
 * Configure migration settings to overwrite fields except node status.
 */
function su_humsci_profile_update_9004() {
  $config_factory = \Drupal::configFactory();
  $migrations = [];
  foreach ($config_factory->listAll('migrate_plus.migration.') as $config_name) {
    preg_match('/migration.(.*)/', $config_name, $matches);
    $migrations[$matches[1]] = $config_factory->getEditable($config_name);
  }

  foreach ($migrations as $migration_config) {
    $process = array_keys($migration_config->get('process'));
    $destination = $migration_config->get('destination.overwrite_properties');
    $overwrite_properties = $destination['overwrite_properties'] ?? $process;
    $status_key = array_search('status', $overwrite_properties);
    if ($status_key !== FALSE) {
      unset($overwrite_properties[$status_key]);
    }
    asort($overwrite_properties);
    $migration_config->set('destination.overwrite_properties', array_values($overwrite_properties))
      ->save();
  }
}

/**
 * Disable webp module.
 */
function su_humsci_profile_update_9405() {
  \Drupal::service('module_installer')->uninstall(['webp']);
}

/**
 * Enable new admin theme and helper module.
 */
function su_humsci_profile_update_9406() {
  \Drupal::service('module_installer')->install(['hs_admin']);
  $theme_handler = \Drupal::service('theme_installer');
  $theme_handler->install([
    'claro',
    'gin',
    'su_humsci_gin_admin',
  ]);
  // Set the su_humsci_gin_admin as the admin theme.
  $config = \Drupal::service('config.factory')->getEditable('system.theme');
  $config->set('admin', 'su_humsci_gin_admin')->save();
  // Install gin toolbar helper module.
  \Drupal::service('module_installer')->install(['gin_toolbar']);
}

/**
 * Uninstall stable and bricks
 */
function su_humsci_profile_update_9500() {
  /** @var \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler */
  $theme_handler = \Drupal::service('theme_handler');
  $theme_installer = \Drupal::service('theme_installer');
  if ($theme_handler->themeExists('classy')) {
    $theme_installer->uninstall(['classy']);
  }
  if ($theme_handler->themeExists('stable')) {
    $theme_installer->uninstall(['stable']);
  }
  if (!$theme_handler->themeExists('stable9')) {
    $theme_installer->install(['stable9']);
  }
  if (\Drupal::moduleHandler()->moduleExists('bricks')) {
    \Drupal::service('module_installer')->uninstall(['bricks']);
  }
}

/**
 * Install SamlAuth
 */
function su_humsci_profile_update_9501() {
  $config_ignore = \Drupal::configFactory()
    ->getEditable('config_ignore.settings');
  $ignored = $config_ignore->get('ignored_config_entities');
  $ignored[] = 'stanford_samlauth.settings';
  $ignored[] = 'samlauth.authentication:map_users_roles';
  $config_ignore->set('ignored_config_entities', $ignored)->save();
  \Drupal::service('module_installer')->install(['stanford_samlauth']);
  _su_humsci_profile_update_samlauth();
}

/**
 * Uninstall seven and fix key configs.
 */
function su_humsci_profile_update_9600() {
  if (\Drupal::service('theme_handler')->themeExists('seven')) {
    \Drupal::service('theme_installer')->uninstall(['seven']);
  }
  // Resave keys to adjust any dependencies.
  foreach (Key::loadMultiple() as $key) {
    $key->save();
  }
}

/**
 * Install hs_entities module.
 */
function su_humsci_profile_update_9602() {
  \Drupal::service('module_installer')->install(['hs_entities']);
}

/**
 * Migrate News RSS ECK importer collection entities to News RSS importer
 * entities.
 */
function su_humsci_profile_update_9603() {
  $config_page_references = [];

  // Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
  $entity_type_manager = \Drupal::entityTypeManager();
  if ($entity_type_manager->hasDefinition('importers')) {
    // Drupal\Core\Entity\Sql\SqlContentEntityStorage $storage.
    $storage = $entity_type_manager->getStorage('importers');
    $entities = $storage->loadByProperties(['type' => 'news_rss']);
    // Drupal\eck\Entity\EckEntity $entity.
    foreach ($entities as $entity) {
      // Drupal\hs_entities\Entity\HsEntity $hs_entity.
      $hs_entity = \Drupal::entityTypeManager()->getStorage('hs_entity')->create([
        'bundle' => 'news_rss'
      ]);
      $hs_entity->set('field_url', $entity->get('field_url')->getValue());
      $hs_entity->set('field_terms', $entity->get('field_terms')->getValue());
      $hs_entity->save();

      $config_pages = \Drupal::entityTypeManager()->getStorage('config_pages')->loadByProperties([
        'type' => 'news_rss',
        'field_news_rss' => $entity->id(),
      ]);
      // Drupal\config_pages\Entity\ConfigPages $config_page
      foreach ($config_pages as $config_page) {
        // Drupal\Core\Field\EntityReferenceFieldItemList $field_news_rss
        $field_news_rss = $config_page->field_news_rss;
        $delta = array_search($entity->id(), array_column($field_news_rss->getValue(), 'target_id'));
        $field_news_rss->removeItem($delta);

        $config_page_references[$config_page->id()][$hs_entity->id()] = $hs_entity->id();

        $config_page->save();
      }

      $entity->delete();
    }
  }

  // Drupal\field\Entity\FieldStorageConfig $field_storage_config
  $field_storage_config = FieldStorageConfig::loadByName('config_pages', 'field_news_rss');
  $field_storage_config->setSetting('target_type', 'hs_entity');
  $field_storage_config->save();

  // Drupal\field\Entity\FieldConfig $field_config
  $field_config =  \Drupal::entityTypeManager()->getStorage('field_config')
    ->load('config_pages.news_rss.field_news_rss');
  $handler_settings = $field_config->getSetting('handler_settings');
  $handler_settings['target_bundles'] = ['news_rss' => 'news_rss'];
  $field_config->setSetting('handler_settings', $handler_settings);
  $field_config->save();

  foreach ($config_page_references as $config_page_id => $config_page_reference) {
    // Drupal\config_pages\Entity\ConfigPages $config_page
    $config_page = \Drupal::entityTypeManager()->getStorage('config_pages')->load($config_page_id);

    // Drupal\Core\Field\EntityReferenceFieldItemList $field_news_rss
    $field_news_rss = $config_page->field_news_rss;

    foreach($config_page_reference as $hs_entity_id) {
      $field_news_rss->appendItem($hs_entity_id);
    }

    $config_page->save();
  }
}

/**
 * Delete news_rss ECK bundle and Importer collections ECK Entity Type.
 */
function su_humsci_profile_update_9504() {
  // Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
  $entity_type_manager = \Drupal::entityTypeManager();

  if ($entity_type_manager->hasDefinition('importers_type')) {
    $news_rss_bundle = $entity_type_manager->getStorage('importers_type')
      ->load('news_rss');
    $news_rss_bundle->delete();
  }

  if ($entity_type_manager->hasDefinition('eck_entity_type')) {
    $importers_collection = $entity_type_manager->getStorage('eck_entity_type')->load('importers');
    $importers_collection->delete();
  }
}
