<?php

/**
 * @file
 * su_humsci_profile.install
 */

use Drupal\user\Entity\User;
use Drupal\user\RoleInterface;
use Drupal\shortcut\Entity\Shortcut;
use Drupal\Core\Config\FileStorage;
use Drupal\Core\DrupalKernel;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;

/**
 * Implements hook_install().
 */
function su_humsci_profile_install() {
  // Assign user 1 the "administrator" role.
  $user = User::load(1);
  $user->roles[] = 'administrator';
  $user->save();

  // We install some menu links, so we have to rebuild the router, to ensure the
  // menu links are valid.
  \Drupal::service('router.builder')->rebuildIfNeeded();

  // Allow authenticated users to use shortcuts.
  user_role_grant_permissions(RoleInterface::AUTHENTICATED_ID, ['access shortcuts']);

  // Populate the default shortcut set.
  $shortcut = Shortcut::create([
    'shortcut_set' => 'default',
    'title' => t('Add content'),
    'weight' => -20,
    'link' => ['uri' => 'internal:/node/add'],
  ]);
  $shortcut->save();

  $shortcut = Shortcut::create([
    'shortcut_set' => 'default',
    'title' => t('All content'),
    'weight' => -19,
    'link' => ['uri' => 'internal:/admin/content'],
  ]);
  $shortcut->save();

  // Allow all users to use search.
  user_role_grant_permissions(RoleInterface::ANONYMOUS_ID, ['search content']);
  user_role_grant_permissions(RoleInterface::AUTHENTICATED_ID, ['search content']);
}

/**
 * Enables config readonly module after profile finishes.
 */
function su_humsci_profile_lock_config(&$install_state) {
  install_finished($install_state);
  \Drupal::service('module_installer')->install(['hs_config_readonly']);
}

/**
 * Create config split entities.
 */
function su_humsci_profile_update_8002() {
  \Drupal::service('module_installer')->install([
    'config_split',
    'config_ignore',
  ]);

  // Install all the default configs first which includes environment specific
  // config splits.
  $source = new FileStorage('../config/default');
  /** @var \Drupal\Core\Config\CachedStorage $config_storage */
  $config_storage = \Drupal::service('config.storage');
  foreach ($source->listAll() as $name) {
    $config_storage->write($name, $source->read($name));
  }

  // Install the config splits from the individual site config directory.
  try {
    $site_path = DrupalKernel::findSitePath(Request::createFromGlobals());
  }
  catch (BadRequestHttpException $e) {
    return;
  }
  $site_dir = str_replace('sites/', '', $site_path);
  if (is_dir("../config/$site_dir")) {
    $source = new FileStorage("../config/$site_dir");
    /** @var \Drupal\Core\Config\CachedStorage $config_storage */
    $config_storage = \Drupal::service('config.storage');
    foreach ($source->listAll() as $name) {
      if (strpos($name, 'config_split')) {
        $config_storage->write($name, $source->read($name));
      }
    }
  }
}
