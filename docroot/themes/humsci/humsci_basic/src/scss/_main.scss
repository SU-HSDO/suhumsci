@charset 'UTF-8';

@import
  // DECANTER (matching how they bring in their imports in decanter.scss)
  //
  // Normalize, Vendors
  'decanter/core/src/scss/core/normalize',

  // Utilities
  // Decanter no markup will not compile any CSS unless used.
  // It brings in everything in the utilities, like variables, mixins,
  // functions, and placeholders.
  'decanter/core/src/scss/decanter-no-markup',

  // Core elements
  // Decanter font imports and sources
  'decanter/core/src/scss/core/fonts',
  'decanter/core/src/scss/core/helpers',
  'decanter/core/src/scss/core/base',

  // Components
  // Below here are Decanter specific components we probably want the styles for:
  'decanter/core/src/scss/components/brand-bar',
  'decanter/core/src/scss/components/lockup',
  'decanter/core/src/scss/components/global-footer',
  'decanter/core/src/scss/components/local-footer',

  // humsci_basic (ITSCSS)
  // 1. Settings
  // 2. Tools
  // 3. Generic
  // 4. Elements
  // 5. Objects
  // 6. Components
  // 7. Vendors
  // 8. Utilities

  // =====================================================================
  // 1. Settings
  //    When using a preprocessor, settings are used to define variable.
  //    This puts variables at the top of the cascade so they are accessible
  //    to all partials further down. No CSS selectors should be generated
  //    by the preprocessor from partials in this section.

  //    When not using a preprocessor, the settings area is a good place
  //    to write comments describing the colors and font stacks as a guide.
  //    If using features such as custom properties, those that are global
  //    custom properties should be described in this section.
  'settings/variables.fonts',
  'settings/variables.general',
  'settings/variables.zindex',
  'settings/variables.theme.colors',
  'settings/variables.fonts',

  // =====================================================================
  // 2. Tools
  //    This section is specifically for preprocessor global mixins and
  //    functions. No CSS should be generated by the preprocessor from
  //    partials in this section.
  'tools/functions.colors',
  'tools/functions.fonts',
  'tools/mixins.themes',
  'tools/mixins.fonts',
  'tools/mixins.layout',

  // =====================================================================
  // 3. Generic
  //    Here we define any generic styles that are not specific to the styles of
  //    the site. This section should include any Reset or Normalize libraries
  //    and any preferencial base styles for elements. There shouldnâ€™t be any
  //    classes or ids used in this section.

  // =====================================================================
  // 4. Elements
  //    Styling for bare HTML elements (like H1, A, etc.). These come with
  //    default styling from the browser so we can redefine them here.
  'elements/base',

  // =====================================================================
  // 5. Objects
  //    Class-based selectors which define undecorated design patterns,
  //    for example media object known from OOCSS.
  'objects/layouts.general',
  'objects/layouts.three_column_w_image',

  // =====================================================================
  // 6. Components
  //    Specific UI components. This is where majority of our work takes place
  //    and our UI components are often composed of Objects and Components
  'components/pattern.horizontal-card',
  'components/masthead',

  // =====================================================================
  // 8. Utilities
  //    Utilities and helper classes with ability to override anything
  //    which goes before in the triangle, eg. hide helper class
  'utilities/fonts';
