@mixin clearfix {
  &::after {
    clear: both;
    content: '';
    display: table;
  }
}

@mixin visually-hidden($status:null) {
  position: absolute;
  clip: rect(1px, 1px, 1px, 1px);
  padding: 0;
  border: 0;
  height: 1px;
  width: 1px;
  overflow: hidden;

  @if $status == 'disable' {
    position: static;
    clip: auto;
    height: auto;
    width: auto;
    overflow: visible;
  }
}

// Adds a background box pseudo element
// You can choose the color and height
// Remember to add position: relative to the parent element
@mixin psuedo-background-box($color: $su-color-driftwood, $height: 100%, $width: 100%) {
  content: ' ';
  position: absolute;
  background-color: $color;
  height: $height;
  width: $width;
}

// Taken and modified from Decanter fancy-hover
// @param {variable} $color [$su-color-dark-red]  - background color, e.g., #eeeeee.
// @param {variable} $active [$su-color-black]  - hover/focus border color.
// @param {string} $position [bottom]  - The position of the border relative to the element the mixin is applied to. The default is 'bottom' and the other choices are 'top', 'left' and 'right'.
// @param {string} $thickness [6px]  - The thickness of the border, e.g., '3px', '1em'.
@mixin hb-fancy-hover($color: $su-color-dark-red, $hover: $su-color-black, $position: 'bottom', $thickness: '6px') {
  text-decoration: none;
  position: relative;

  &::before {
    content: '';
    position: absolute;
    visibility: visible;
    background-color: $color;
    transition: transform 0.3s ease-in, background-color 0.3s ease-in;
  }

  &:hover,
  &:focus,
  &:active {
    text-decoration: none;

    &::before {
      background-color: $hover;
      transition: transform 0.3s ease-out, background-color 0.3s ease-out;
    }
  }

  @if ($position == 'bottom' or $position == 'top') {
    &::before {
      width: 100%;
      height: #{$thickness};
      //scss-lint:disable EmptyLineBetweenBlocks
      left: 0;
      //scss-lint:enable EmptyLineBetweenBlocks
    } @if ($position == 'bottom') {
      @include padding(null null 0.8em);

      &::before {
        bottom: 0;
      }
    } @else if ($position == 'top') {
      @include padding(0.8em null null);

      &::before {
        top: 0;
      }
    }
  } @else if ($position == 'left' or $position == 'right') {
    &::before {
      height: 100%;
      width: #{$thickness};
      //scss-lint:disable EmptyLineBetweenBlocks
      bottom: 0;
      //scss-lint:enable EmptyLineBetweenBlocks
    } @if ($position == 'left') {
      &::before {
        left: 0;
      }
    } @else if ($position == 'right') {
      &::before {
        right: 0;
      }
    }
  }
}

@mixin hb-unordered-list {
  list-style-type: none;

  li {
    position: relative;
    line-height: 122%;
    padding-bottom: hb-calculate-rems(10px);

    &::before {
      content: '';
      display: block;
      height: hb-calculate-rems(6px);
      width: hb-calculate-rems(6px);
      border-radius: 50%;
      background-color: $hb-color--black;

      position: absolute;
      left: hb-calculate-rems(-18px);
      top: hb-calculate-rems(8px);

      @include hb-colorful {
        background-color: hb-colorful-variation(secondary);
      }
    }
  }
}

@mixin hb-ordered-list {
  counter-reset: li;
  list-style-type: none;

  li {
    position: relative;
    line-height: 122%;
    padding-bottom: hb-calculate-rems(10px);

    &::before {
      content: counter(li) '.';
      counter-increment: li;
      font-size: hb-calculate-rems(16px);
      font-weight: hb-theme-font-weight(semibold);
      color: inherit;

      position: absolute;
      left: hb-calculate-rems(-18px);

      @include hb-colorful {
        color: hb-colorful-variation(secondary);
      }
    }
  }
}
