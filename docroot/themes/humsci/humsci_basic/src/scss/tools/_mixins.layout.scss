@mixin hb-page-width {
  max-width: hb-calculate-rems($hb-layout-max-width) !important;
  margin-left: auto !important;
  margin-right: auto !important;
  width: calc(100% - (2 * #{hb-spacing-width('md')})) !important;

  @include grid-media-min('md') {
    width: calc(100% - (2 * #{hb-spacing-width()})) !important;
  }
}

@mixin hb-column-width($percentage, $margin, $cols) {
  width: calc(#{$percentage} - (#{$margin} / #{$cols})); // for 3 elements, 2 have gutter-width

  @supports (display: grid) {
    width: 100%;
    min-width: calc(#{$percentage} - (#{$margin} / #{$cols}));
    margin-right: 0;
  }
}

// For this mixin:
//
// @param(integer) $col-number
// For grids with 2 cols, it will remain 2 cols after sm.
// For grids with 3 or 4 cols, it will become 3 or 4 cols at md and remain.
// All grids above 4 cols will have:
// 1 col at mobile,
// 2 cols at sm,
// 3 cols at md,
// and then the requested number at lg.
// Cols over 12 are not supported.
@mixin hb-column($col-number: 2) {
  $percentage-width: 100% / $col-number;

  @if ($col-number > 1) {
    $one-less-col: $col-number - 1;
    $total-margin: $one-less-col * hb-spacing-width('default', false);

    // 2 cols
    @include grid-media-min('sm') {
      @include hb-column-width(50%, (hb-spacing-width()), 2); // for two elements, there is 1 gutter-width between
      margin-right: hb-spacing-width();

      @supports (display: grid) {
        margin-right: 0;
      }

      &:nth-child(2n) {
        margin-right: 0;
      }
    }

    @if ($col-number > 2) {
      @if ($col-number != 4) {
        // 3 cols
        @include grid-media-min('md') {

          @include hb-column-width(33.33%, #{hb-calculate-rems(2 * hb-spacing-width('default', false))}, 3); // for 3 elements, 2 have gutter-width

          &:nth-child(2n) {
            margin-right: hb-spacing-width();

            @supports (display: grid) {
              margin-right: 0;
            }
          }

          &:nth-child(3n) {
            margin-right: 0;
          }
        }
      }

      // above 3 cols
      @include grid-media-min('lg') {
        @include hb-column-width($percentage-width, $total-margin, $col-number);

        &:nth-child(2n),
        &:nth-child(3n) {
          margin-right: hb-spacing-width();

          @supports (display: grid) {
            margin-right: 0;
          }
        }

        &:nth-child(#{$col-number}n) {
          margin-right: 0;
        }
      }
    }
  }
}

// This mixin adds background color and z-index for sidebar areas of the layout.
@mixin hb-sidebar {
  width: 100%;
  z-index: $hb-z-index-small-1;
  position: relative;
  @include hb-global-color('background-color', 'white');

  // The override below changes the sidebar styling to default within the layout builder admin area.
  .layout-builder & {
    z-index: auto;
    background-color: initial;
  }

  &.hb-well,
  &.hs-well,
  &.pullquote {
    @include hb-well;
  }
}

// This mixin adds a padding and border outline for utility usage.
@mixin hb-sidebar-block {
  padding: hb-calculate-rems(20px) hb-calculate-rems(18px);
  border: $hb-thin-border;
  @include hb-global-color('border-color', 'gray');

  &:not(:last-child) {
    margin-bottom: hb-calculate-rems(18px);
  }
}
