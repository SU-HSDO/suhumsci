@include describe('HB Colorful Color Pairing Function') {

  // OCEAN
  @include describe('When given a valid key value,') {

    @include describe('the hb-get-pairing-color() function') {
      @include it('returns the Colorful Ocean palette.') {
        $test: hb-get-pairing-color('primary', 'ocean', $hc-colorful-pairings);
        $expect: #00505c;

        @include assert-equal($test, $expect, 'The Ocean color pairing primary color value either does not match or does not exist.');
      }
    }
  }

  // MOUNTAIN
  @include describe('When given a valid key value,') {

    @include describe('the hb-get-pairing-color() function') {
      @include it('returns the Colorful Mountain palette.') {
        $test: hb-get-pairing-color('primary', 'mountain', $hc-colorful-pairings);
        $expect: #64305F;

        @include assert-equal($test, $expect, 'The Mountain color pairing primary color value either does not match or does not exist.');
      }
    }
  }

  // CARDINAL
  @include describe('When given a valid key value,') {

    @include describe('the hb-get-pairing-color() function') {
      @include it('returns the Colorful Cardinal palette.') {
        $test: hb-get-pairing-color('primary', 'cardinal', $hc-colorful-pairings);
        $expect: #600E0E;

        @include assert-equal($test, $expect, 'The Cardinal color pairing primary color value either does not match or does not exist.');
      }
    }
  }


  // PENDING TEST FOR INVALID KEY
  // https://www.educative.io/blog/sass-tutorial-unit-testing-with-sass-true
  @include describe('When given a invalid key value,') {

    @include describe('the hb-get-pairing-color() function') {
      @include it('returns the Colorful ocean palette.') {
        //   $test: hb-get-pairing-color(quarternary, ocean, $hc-colorful-pairings);
        //   $expect: 'Couldn\'t find a value for this key: quarternary';

        //   @include assert-equal($test, $expect, 'The Ocean color pairing quarternary color value should not match or nor exist.');
      }
    }
  }
}

@include describe('HB Colorful Global Color Function') {

  // GRAY
  @include describe('When given a valid key value,') {

    @include describe('the hb-get-global-color() function') {
      @include it('returns the Colorful Global Gray.') {
        $test: hb-get-global-color('gray', $hc-colorful-globals);
        $expect: #b6b1a9;

        @include assert-equal($test, $expect, 'The global color value gray either does not match or does not exist.');
      }
    }
  }
}

@include describe('HB Traditional Color Pairing Function') {

  // CARDINAL
  @include describe('When given a valid key value,') {

    @include describe('the hb-get-pairing-color() function') {
      @include it('returns the Traditional Cardinal palette.') {
        $test: hb-get-pairing-color('primary', 'cardinal', $ht-traditional-pairings);
        $expect: #600e0e;

        @include assert-equal($test, $expect, 'The Cardinal color pairing primary color value either does not match or does not exist.');
      }
    }
  }

  // BLUE JAY
  @include describe('When given a valid key value,') {

    @include describe('the hb-get-pairing-color() function') {
      @include it('returns the Traditional Blue Jay palette.') {
        // Many of the colors on the Cardinal and Blue Jay palettes are the same.
        // Test a color that is not the same between the two palettes.
        $test: hb-get-pairing-color('secondary-highlight', 'bluejay', $ht-traditional-pairings);
        $expect: #daebed;

        @include assert-equal($test, $expect, 'The Blue Jay color pairing primary color value either does not match or does not exist.');
      }
    }
  }

  // HUMMINGBIRD
  @include describe('When given a valid key value,') {

    @include describe('the hb-get-pairing-color() function') {
      @include it('returns the Traditional Hummingbird palette.') {
        // Many of the colors on the Cardinal and Blue Jay palettes are the same.
        // Test a color that is not the same between the two palettes.
        $test: hb-get-pairing-color('secondary-highlight', 'hummingbird', $ht-traditional-pairings);
        $expect: #f0ece6;

        @include assert-equal($test, $expect, 'The Hummingbird color pairing primary color value either does not match or does not exist.');
      }
    }
  }
}

@include describe('HB Traditional Global Color Function') {

  // GRAY
  @include describe('When given a valid key value,') {

    @include describe('the hb-get-global-color() function') {
      @include it('returns the Traditional Global Gray.') {
        $test: hb-get-global-color('gray', $ht-traditional-globals);
        $expect: #b3b5b9;

        @include assert-equal($test, $expect, 'The global color value gray either does not match or does not exist.');
      }
    }
  }
}