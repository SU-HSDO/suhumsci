// Describe what you're testing
@include describe('Color Pairing mixin') {

  // Default Colorful Pairing - Ocean
  // Other color pairings cannot be tested as the CSS variables
  // for other pairing are only set via a class applied to
  // the HTML tag.
  @include describe('hb-pairing-color() mixin for the Colorful Theme') {

    @include it('returns the property and value for a color pairing') {
      @include assert {
        @include output {
          @include hb-pairing-color('color', 'primary');
        }
        @include contains {
          color: #00505c;
        }
      }
    }
  }

  // Default Traditional Pairing - Default
  // Other color pairings cannot be tested as the CSS variables
  // for other pairing are only set via a class applied to
  // the HTML tag.
  @include describe('hb-pairing-color() mixin for the Traditional Theme') {
    $hb-current-theme: 'traditional' !global;

    @include it('returns the property and value for a color pairing') {
      @include assert {
        @include output {
          @include hb-pairing-color('color', 'primary');
        }
        @include contains {
          color: #600e0e;
        }
      }
    }
  }
}

@include describe('Global colors mixin') {

  // Global colors
  @include describe('hb-global-color() mixin for the Colorful Theme') {
    $hb-current-theme: 'colorful' !global;

    @include it('returns the property and value for a global color') {
      @include assert {
        @include output {
          color: var(--palette--gray-dark);
        }
        @include contains {
          color: #413e39;
        }
      }
    }
  }

  @include describe('hb-global-color() mixin for the Traditional Theme') {
    $hb-current-theme: 'traditional' !global;

    @include it('returns the property and value for a global color') {
      @include assert {
        @include output {
          color: var(--palette--gray);
        }
        @include contains {
          color: #b3b5b9;
        }
      }
    }
  }
}
