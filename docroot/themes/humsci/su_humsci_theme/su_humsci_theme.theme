<?php

/**
 * @file
 * Preprocess functions for Stanford HumSci.
 */

use Drupal\image\Entity\ImageStyle;
use Drupal\views\Plugin\views\field\EntityField;
use Drupal\Component\Utility\Html;
use Drupal\node\Entity\Node;
use Drupal\Component\Utility\SortArray;
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_preprocess_HOOK.
 *
 * Use lazy loading on images.
 */
function su_humsci_theme_preprocess_image_style(&$variables) {
  if (
    !isset($variables['image']['#width']) ||
    !isset($variables['image']['#height']) ||
    \Drupal::routeMatch()->getRouteName() == 'media.filter.preview'
  ) {
    return;
  }

  /** @var \Drupal\image\ImageStyleInterface $lazy_loading_style */
  $lazy_loading_style = ImageStyle::load('lazy_loading');
  if (!$lazy_loading_style) {
    return;
  }

  $lazy_thumbnail = $lazy_loading_style->buildUri($variables['uri']);
  if (!file_exists($lazy_thumbnail)) {
    $lazy_loading_style->createDerivative($variables['uri'], $lazy_thumbnail);
  }

  $variables['image']['#attributes']['data-src'] = $variables['image']['#uri'];
  $variables['image']['#attributes']['class'][] = 'lazy';
  $variables['image']['#uri'] = \Drupal::service('file_url_generator')->transformRelative($lazy_loading_style->buildUrl($variables['uri']));
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Fix table row pattern when using views.
 */
function su_humsci_theme_preprocess_pattern_views_row(&$variables) {
  if ($variables['pattern']['#id'] !== 'table_row') {
    return;
  }
  foreach ($variables['options']['pattern_mapping'] as $source => $destination) {
    // If the column is mapped to a field, ensure the column in the table row
    // has something in it. Without anything, the row will collapse on the
    // column and will cause staggering data.
    if (!isset($variables['pattern']['#fields'][$destination['destination']])) {
      $variables['pattern']['#fields'][$destination['destination']] = [
        [
          '#markup' => '',
        ],
      ];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function su_humsci_theme_preprocess_pattern_accordion(&$variables) {
  $id = Html::getUniqueId('accordion');
  $summary_attributes = [
    'role' => 'button',
    'aria-controls' => $id,
    'aria-expanded' => $variables['variant'] == 'open' ? 'true' : 'false',
    'aria-pressed' => 'false',
  ];
  $variables['summary_attributes'] = new Attribute($summary_attributes);
  $variables['attributes']->setAttribute('id', $id);
}

/**
 * Implements hook_preprocess_patterns_overview_page().
 */
function su_humsci_theme_preprocess_patterns_overview_page(&$variables) {
  uasort($variables['patterns'], function ($pattern_a, $pattern_b) {
    return SortArray::sortByKeyString($pattern_a, $pattern_b, 'label');
  });
}

/**
 * Implements hook_preprocess_page().
 */
function su_humsci_theme_preprocess_page(&$vars) {
  // Node pages are configured with layout builder so we dont need to set this
  // class.
  $route = \Drupal::routeMatch()->getRouteName();
  $layout_routes = [
    'layout_builder.overrides.node.view',
    'layout_builder.defaults.node.view',
  ];

  if (!isset($vars['node']) && !in_array($route, $layout_routes)) {
    $vars['main_class'] = 'decanter-grid';
  }

  if ($site_style = theme_get_setting('humsci_site_styles')) {
    // No errors occur if the library doesn't exist, so this is safe to do.
    $vars['#attached']['library'][] = "su_humsci_theme/$site_style";
  }
}

/**
 * Implements hook_preprocess_node().
 */
function su_humsci_theme_preprocess_node(&$vars) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $vars['node'];
  $vars['attributes']['class'][] = Html::cleanCssIdentifier($node->bundle());
  $vars['attributes']['class'][] = Html::cleanCssIdentifier($vars['view_mode']);

  // Add the node specific styles.
  if ($vars['page']) {
    $vars['#attached']['library'][] = 'su_humsci_theme/' . $node->bundle();
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function su_humsci_theme_preprocess_paragraph(&$vars) {
  $vars['#attached']['library'][] = 'su_humsci_theme/' . $vars['paragraph']->bundle();
}

/**
 * Implements hook_preprocess_views_view().
 */
function su_humsci_theme_preprocess_views_view(&$vars) {
  if (!empty($vars['more'])) {
    // Add class to read more link in views.
    $vars['more']['#options']['attributes']['class'][] = 'decanter-button';
  }
}

/**
 * Implements hook_preprocess_block().
 */
function su_humsci_theme_preprocess_block(&$vars) {
  $block_ids = ['local_tasks_block'];
  if (in_array($vars['elements']['#plugin_id'], $block_ids)) {
    $vars['attributes']['class'][] = 'decanter-grid';
  }

  // Change the block label to the block description so that users can change
  // the block label without needing the permission to administer blocks. The
  // role would only need the "Edit any block content" permission.
  if ($vars['base_plugin_id'] == 'block_content' && !empty($vars['content']['#block_content'])) {
    /** @var \Drupal\block_content\Entity\BlockContent $block */
    $block = $vars['content']['#block_content'];
    $info = $block->get('info')->get(0)->getValue();
    $vars['label'] = reset($info) ?: $vars['label'];
  }
}

/**
 * Implements hook_preprocess_pattern_view_field().
 */
function su_humsci_theme_preprocess_pattern_view_field(&$vars) {
  $field = $vars['field'];
  if ($field->handler instanceof EntityField) {
    $items = $field->handler->getItems($vars['row']);

    // Make labels plural if they are generic.
    if ($field->label) {
      $replacement = count($items) > 1 ? 's' : '';
      $field->label = str_replace('(s)', $replacement, $field->label);
    }
  }
}

/**
 * Implements hook_preprocess_field().
 */
function su_humsci_theme_preprocess_field(&$vars) {
  if ($vars['field_name'] == 'field_hs_page_components') {
    foreach ($vars['items'] as $delta => $item) {
      /** @var \Drupal\Core\Template\Attribute $item_attributes */
      $item_attributes = $item['attributes'];
      $attributes_array = $item_attributes->toArray();
      $attributes_array['class'][] = 'clearfix';
      $vars['items'][$delta]['attributes']->setAttribute('class', $attributes_array['class']);
    }
  }

  // Check if the field allows for multiple first. If the field is configured
  // for a single value, and relies on the user doing some type of indication
  // of the difference between each item, we can't account for those.
  if ($vars['multiple']) {
    // Make labels plural if they are generic.
    $replacement = count($vars['items']) > 1 ? 's' : '';
    $vars['label'] = str_replace('(s)', $replacement, $vars['label']);
  }
}

/**
 * Implements hook_preprocess_menu().
 */
function su_humsci_theme_preprocess_menu(&$vars) {
  if ($vars['menu_name'] == 'main') {
    _su_humsci_theme_check_link_access($vars['items']);
  }
}

/**
 * Add an attribute to menu items that point to unpublished nodes.
 *
 * Unpublished nodes menu items still show in the main menu and the menu block
 * in the side navigation. We will target the attribute with css to give a
 * visual indicator that something is different with that menu item.
 *
 * @param array $link_items
 *   Keyed array of menu items.
 */
function _su_humsci_theme_check_link_access(array &$link_items) {
  foreach ($link_items as &$link_item) {
    /** @var \Drupal\Core\Url $url */
    $url = $link_item['url'];

    if ($url->isRouted() && $url->getRouteName() == 'entity.node.canonical') {
      $parameters = $url->getRouteParameters();
      $nid = $parameters['node'];
      /** @var \Drupal\node\NodeInterface $node */
      $node = Node::load($nid);
      if ($node && !$node->isPublished()) {
        $link_item['attributes']->setAttribute('data-unpublished-node', 'true');
      }
    }

    if (!empty($link_item['below'])) {
      _su_humsci_theme_check_link_access($link_item['below']);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function su_humsci_theme_preprocess_pattern_vertical_link_card(&$variables) {
  $renderer = \Drupal::service('renderer');
  if (!empty($variables['button'])) {
    $dom = new DOMDocument();
    $dom->loadHTML($renderer->renderPlain($variables['button']));
    $xpath = new DOMXPath($dom);
    $links = $xpath->query('//a/@href');
    // If the markup is a link, grab the href attribute.
    if ($links->length) {
      $variables['button'] = $links->item(0)->nodeValue;
    }
    else {
      // The markup is just a string with the url, we can use that.
      $variables['button'] = htmlspecialchars_decode(trim(strip_tags($renderer->renderPlain($variables['button']))));
    }
  }
  if (!empty($variables['title'])) {
    $variables['title'] = ['#markup' => trim(strip_tags($renderer->renderPlain($variables['title'])))];
  }
}
