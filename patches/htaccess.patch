diff --git a/docroot/.htaccess b/docroot/.htaccess
index 4d19147c..d3985779 100644
--- a/docroot/.htaccess
+++ b/docroot/.htaccess
@@ -1,3 +1,30 @@
+
+# Block bad bots.
+# See https://docs.acquia.com/cloud-platform/arch/security/restrict/#cloud-blocking-by-ip.
+<ifmodule mod_setenvif.c>
+  # Match specific IP addresses.
+  SetEnvIf AH_CLIENT_IP ^67\.225\.152\.21$ Deny_Host
+  SetEnvIf AH_CLIENT_IP ^52\.143\.102\.216$ Deny_Host
+  SetEnvIf AH_CLIENT_IP ^52\.237\.223\.18$ Deny_Host
+  SetEnvIf AH_CLIENT_IP ^107\.161\.51\.47$ Deny_Host
+  SetEnvIf AH_CLIENT_IP ^47\.241\.20\.234$ Deny_Host
+  SetEnvIf AH_CLIENT_IP ^161\.117\.182\.32$ Deny_Host
+  SetEnvIf AH_CLIENT_IP ^161\.117\.88\.143$ Deny_Host
+  SetEnvIf AH_CLIENT_IP ^47\.241\.104\.252$ Deny_Host
+  SetEnvIf AH_CLIENT_IP ^161\.117\.235\.27$ Deny_Host
+  SetEnvIf AH_CLIENT_IP ^206\.189\.77\.91$ Deny_Host
+  SetEnvIf AH_CLIENT_IP ^161\.117\.176\.134$ Deny_Host
+  SetEnvIf AH_CLIENT_IP ^213\.226\.123\.19$ Deny_Host
+  SetEnvIf AH_CLIENT_IP ^159\.223\.3\.1$ Deny_Host
+  SetEnvIf AH_CLIENT_IP ^146\.190\.20\.213$ Deny_Host
+  SetEnvIf AH_CLIENT_IP ^146\.190\.24\.114$ Deny_Host
+  SetEnvIf AH_CLIENT_IP ^193\.134\.209\.57$ Deny_Host
+  SetEnvIf AH_CLIENT_IP ^104\.248\.195\.73$ Deny_Host
+  Order allow,deny
+  Allow from all
+  Deny from env=Deny_Host
+</ifmodule>
+
 #
 # Apache/PHP/Drupal settings:
 #
@@ -18,6 +45,9 @@ Options -Indexes
 # Set the default handler.
 DirectoryIndex index.php index.html index.htm
 
+# Add webp MIME type so that Apache knows how to handle WebP images
+AddType image/webp .webp
+
 # Add correct encoding for SVGZ.
 AddType image/svg+xml svg svgz
 AddEncoding gzip svgz
@@ -67,6 +97,61 @@ AddEncoding gzip svgz
 <IfModule mod_rewrite.c>
   RewriteEngine on
 
+  # Block access via specific user-agents.
+  RewriteCond %{HTTP_USER_AGENT} CQ-API-Spyder [NC]
+  RewriteRule .* - [F,L]
+
+  # Block access to php & html files. Node_modules and the vendor
+  # directory should never be available. Also block any WordPress urls.
+  RewriteCond %{REQUEST_URI} node_modules [OR,NC]
+  RewriteCond %{REQUEST_URI} ^/vendor [OR,NC]
+  RewriteCond %{REQUEST_URI} "/wp-(admin|content/plugins/|includes|cron\.php|config\.php|login\.php|signup\.php)|xmlrpc.php" [OR,NC]
+  RewriteCond %{THE_REQUEST} \.php[/\s?] [OR,NC]
+  RewriteCond %{REQUEST_URI} \.html [NC]
+   # Allow access to SimpleSaml login and music.stanford.edu redirect paths.
+  RewriteCond %{REQUEST_URI} !^/simplesaml/module.php
+  RewriteCond %{REQUEST_URI} !^/Academics/LessonSignups.html
+  RewriteCond %{REQUEST_URI} !^/FOM/fom.html
+  RewriteRule .* - [F]
+
+  # Block access to specific files/paths to all users except stanford IP's.
+  # Each condition blocks unwanted access to all users at the apache level.
+  # This prevents drupal from bootstrapping. Most of these conditions are
+  # requested by bots or by user's cached requests.
+  RewriteCond %{REQUEST_URI} ^/simplesaml [OR]
+  RewriteCond %{REQUEST_URI} ^/update.php$ [OR]
+  RewriteCond %{REQUEST_URI} \.map$ [OR,NC]
+  RewriteCond %{REQUEST_URI} ^/core/install.php
+  # Only need to block on Acquia's environment. Local isn't a concern.
+  RewriteCond %{ENV:AH_SITE_ENVIRONMENT} (dev|test|prod|live)$
+  # The following path is always required to log into the site.
+  RewriteCond %{REQUEST_URI} !^/simplesaml/module.php/saml/sp/saml2-acs.php/default-sp
+  RewriteCond %{ENV:AH_Client_IP} !^127.0.0.1$
+  # Block the above conditions on acquia infrastructure.
+  # See https://httpd.apache.org/docs/2.4/rewrite/flags.html#flag_f.
+  RewriteRule .* - [F]
+
+  RewriteCond %{HTTP_HOST} ^statistics [NC]
+  RewriteCond %{REQUEST_URI} ^\/~ [NC]
+  RewriteRule (.*)$ https://statweb.stanford.edu/$1 [L,R=301]
+
+  # Redirect HTTP to HTTPS on cloud
+  RewriteCond %{HTTPS} off
+  RewriteCond %{HTTP:X-Forwarded-Proto} !https
+  RewriteCond %{ENV:AH_SITE_ENVIRONMENT} prod [NC,OR]
+  RewriteCond %{ENV:AH_SITE_ENVIRONMENT} test [NC,OR]
+  RewriteCond %{ENV:AH_SITE_ENVIRONMENT} dev [NC]
+  RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [NE,L,R=301]
+
+  RewriteCond %{HTTP_HOST} ^symsys\.stanford\.edu [NC]
+  RewriteCond %{REQUEST_URI} ^/viewing/ [OR]
+  RewriteCond %{QUERY_STRING} ^.*viewing
+  RewriteRule ^(.*)$ http://%{HTTP_HOST}? [NE,L,R=301]
+
+  RewriteCond %{REQUEST_URI} ^/wp-content/ [NC]
+  RewriteCond %{REQUEST_URI} (.js|.css|.jpg|.jpeg|.png|.pdf)$
+  RewriteRule .* - [F]
+
   # Set "protossl" to "s" if we were accessed via https://.  This is used later
   # if you enable "www." stripping or enforcement, in order to ensure that
   # you don't bounce between http and https.
@@ -144,6 +229,8 @@ AddEncoding gzip svgz
   RewriteCond %{REQUEST_URI} !/core/[^/]*\.php$
   # Allow access to test-specific PHP files:
   RewriteCond %{REQUEST_URI} !/core/modules/system/tests/https?\.php
+  # Allow access to simplesaml paths.
+  RewriteCond %{REQUEST_URI} !^/simplesaml
   # Allow access to Statistics module's custom front controller.
   # Copy and adapt this rule to directly execute PHP files in contributed or
   # custom modules or to run another PHP application in the same directory.
